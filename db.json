{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/alipay-reward-image.png","path":"uploads/alipay-reward-image.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wechat-reward-image.png","path":"uploads/wechat-reward-image.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1500124206000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1500123862000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1500123862000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1500123863000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1500123862000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1500123863000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1500123863000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1500123863000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1500123863000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1500123863000},{"_id":"themes/next/_config.yml","hash":"c81bb15c1f62f7a63a7f344e521d68189c6a82df","modified":1500126360000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1500123863000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1500123863000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1500123863000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1500123863000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1500123863000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1500123863000},{"_id":"source/_posts/CSS-实现内容垂直居中.md","hash":"afcc5670cdf55c0a46d7ec96bdc51cc513209ede","modified":1500125322000},{"_id":"source/_posts/玩转-React-表单：使用-Refs.md","hash":"f40a4e07daaa3bfe5fb3c4f122579be5ce5ae043","modified":1500125322000},{"_id":"source/_posts/Icomoon-的使用.md","hash":"3d970c6aa8a71cee9bfc4c4bc2af2c60e66d0f34","modified":1500125322000},{"_id":"source/_posts/Angular之路-带你来搭建Webpack-2-Angular-4项目.md","hash":"ce30a3a87a1efa03357e53157228e55e453c3281","modified":1500125322000},{"_id":"source/categories/index.md","hash":"6997fc96df04bc797b9b3b5124e51cd502d54484","modified":1500125220000},{"_id":"source/about/index.md","hash":"314a96a1ea399d9a099ed6a5d31a6e71367d5520","modified":1500125220000},{"_id":"source/tags/index.md","hash":"972049fb363a5801280d0fe40b37080abc6c3868","modified":1500125220000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500123862000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1500123862000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500123849000},{"_id":"themes/next/.git/index","hash":"d85e6f648db1c67e428797240dd1a66ca5eef8ac","modified":1500124533000},{"_id":"themes/next/.git/packed-refs","hash":"d5196179b7772925c1cf2aa5d5a280c20c9b21af","modified":1500123862000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1500123863000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"ff383596cc1671f389d4500e67e004ae300d083e","modified":1500123863000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1500123863000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1500123863000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1500123863000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1500123863000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1500123863000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1500123863000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1500123863000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1500123863000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1500123863000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1500123863000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1500123863000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1500123863000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1500123863000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1500123863000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1500123863000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1500123863000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1500123863000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1500123863000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1500123863000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1500123863000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1500123863000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1500123863000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1500123863000},{"_id":"themes/next/source/.DS_Store","hash":"71fac47b481fbb0a69b3523bbe35f8fab81980f8","modified":1500124206000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1500123863000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1500123863000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1500123863000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500123849000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1500123849000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500123849000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1500123849000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1500123849000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500123849000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500123849000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1500123849000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1500123849000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1500123849000},{"_id":"themes/next/.git/logs/HEAD","hash":"193ba5dc48efb5800d3e9733e80d883582ff1cfd","modified":1500123862000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500123863000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1500123863000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1500123863000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1500123863000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1500123863000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1500123863000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1500123863000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d6fe43765bc01017ca3f9a384eeddaf28b6382c8","modified":1500123863000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3dac0f5af6a590ea49a3d172ff6fafbf50cc2604","modified":1500123863000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1500123863000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1500123863000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1500123863000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1500123863000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1500123863000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1500123863000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1500123863000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1500123863000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1500123863000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1500123863000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1500123863000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1500123863000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1500123863000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1500123863000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1500123863000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1500123863000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1500123863000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1500123863000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1500123863000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1500123863000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1500123863000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1500123863000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1500123863000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500123863000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500123863000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500123863000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500123863000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500123863000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500123863000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500123863000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500123863000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500123863000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500123863000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500123863000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500123863000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500123863000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500123863000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500123863000},{"_id":"themes/next/source/uploads/alipay-reward-image.png","hash":"4a0d0ac2674130282c5aebf1076face4a88e488c","modified":1500101744000},{"_id":"themes/next/.git/refs/heads/master","hash":"aadf6340622df03abda4f3e1a5866786abfe755c","modified":1500123862000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1500123863000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1500123863000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1500123863000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1500123863000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1500123863000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1500123863000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1500123863000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1500123863000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1500123863000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1500123863000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1500123863000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1500123863000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1500123863000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1500123863000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1500123863000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1500123863000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1500123863000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1500123863000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1500123863000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ceceb93029d98cd63a689ad08e25fbe7f6b7ee1c","modified":1500123863000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1500123863000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1500123863000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1500123863000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500123863000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1500123863000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500123863000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1500123863000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500123863000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500123863000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500123863000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500123863000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500123863000},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500123863000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500123863000},{"_id":"themes/next/source/uploads/wechat-reward-image.png","hash":"d2b34c1003324b21b052a411d3323b548d9dfe24","modified":1500101745000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500123863000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1500123863000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1500123863000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1500123863000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500123863000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500123863000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500123863000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500123863000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500123863000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500123863000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"193ba5dc48efb5800d3e9733e80d883582ff1cfd","modified":1500123862000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500123862000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1500123863000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1500123863000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b5074a61d04757b6adf8f757668b9fea01730a6c","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1500123863000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1500123863000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1500123863000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1500123863000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1500123863000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1500123863000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500123863000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500123863000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500123863000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500123863000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500123863000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"193ba5dc48efb5800d3e9733e80d883582ff1cfd","modified":1500123862000},{"_id":"themes/next/.git/objects/pack/pack-bcc32231416afa49d5f439280f5782b651e9275b.idx","hash":"73d529466fe8cde239b85074b6e022b29b0f93a1","modified":1500123862000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1500123863000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500123863000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500123863000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500123863000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500123863000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500123863000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500123863000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500123863000},{"_id":"themes/next/source/uploads/avatar.png","hash":"15f36672ac0af1b2f58ebde88e880f33b3a4ce1c","modified":1500113906000},{"_id":"themes/next/.git/objects/pack/pack-bcc32231416afa49d5f439280f5782b651e9275b.pack","hash":"057d7b7ddf12c823be980af033122fe6d831f26c","modified":1500123862000},{"_id":"public/categories/index.html","hash":"202becfb78092b69ddda22de0a27d70d2735d64e","modified":1500126374062},{"_id":"public/about/index.html","hash":"16f33da02d145219d120d8cd5270168e3ec7db6d","modified":1500126374062},{"_id":"public/tags/index.html","hash":"71cc3d27426fa091018d6011534a04036e29e3dc","modified":1500126374063},{"_id":"public/archives/2016/06/index.html","hash":"e78df1f386f3650505ddc3fc0a2d5de6eb30c950","modified":1500126374063},{"_id":"public/archives/2016/index.html","hash":"54307230780adce5010c6c1f6cdd02ad27cc26e1","modified":1500126374063},{"_id":"public/archives/2017/index.html","hash":"9122dcff2b3ada5a826577c64cad48283202c911","modified":1500126374063},{"_id":"public/archives/2017/04/index.html","hash":"06278589824dcc7796a0bfd922f330e21b7ba649","modified":1500126374063},{"_id":"public/archives/2017/06/index.html","hash":"e69884477558a2f8354aea18697d10b966bb71f0","modified":1500126374063},{"_id":"public/2017/06/27/玩转-React-表单：使用-Refs/index.html","hash":"7f85f55b0cbc3190c25047cb529f072ea6376044","modified":1500126374063},{"_id":"public/2017/04/12/Angular之路-带你来搭建Webpack-2-Angular-4项目/index.html","hash":"ea163c90e7385afa0ca4d2406e792cb6da121a4c","modified":1500126374063},{"_id":"public/2016/06/14/Icomoon-的使用/index.html","hash":"b4410ca3c826bd50bd732ec82d318c2920b0e82c","modified":1500126374063},{"_id":"public/2016/06/13/CSS-实现内容垂直居中/index.html","hash":"3d462cfca8f284a4f05f1cfc57d5368a37d2b268","modified":1500126374063},{"_id":"public/archives/index.html","hash":"76f6a76d62ba8c1b7081c599fafb43f731a7ad7b","modified":1500126374063},{"_id":"public/index.html","hash":"0ebfabd2792d0d9668bc323e79be00d98337686c","modified":1500126374064},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500126374079},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500126374079},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500126374079},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500126374079},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500126374079},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500126374079},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500126374079},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500126374079},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500126374080},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500126374080},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500126374080},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500126374080},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500126374080},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500126374080},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500126374080},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500126374080},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500126374081},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500126374081},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500126374081},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500126374081},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500126374081},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500126374081},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500126374081},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500126374081},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500126374081},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500126374081},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500126374081},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500126374081},{"_id":"public/uploads/alipay-reward-image.png","hash":"4a0d0ac2674130282c5aebf1076face4a88e488c","modified":1500126374809},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500126374815},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500126374835},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500126374843},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1500126374843},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500126374844},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1500126374844},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1500126374844},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500126374844},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500126374844},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500126374844},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1500126374844},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500126374844},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500126374844},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500126374844},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500126374844},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1500126374845},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1500126374845},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1500126374845},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1500126374845},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500126374845},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1500126374845},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1500126374845},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1500126374845},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500126374845},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500126374846},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500126374846},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1500126374846},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500126374846},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500126374846},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500126374846},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500126374846},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500126374846},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500126374846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500126374846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500126374846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500126374846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500126374846},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500126374846},{"_id":"public/css/main.css","hash":"f735ab1380b1d44e57c6b5d9b068a1be75605918","modified":1500126374846},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500126374846},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500126374847},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500126374847},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500126374847},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500126374847},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500126374847},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500126374847},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500126374847},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500126374847},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500126374847},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500126374847},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500126374847},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500126374847},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500126374847},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500126374847},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500126374847},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500126374847},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500126374847},{"_id":"public/uploads/wechat-reward-image.png","hash":"d2b34c1003324b21b052a411d3323b548d9dfe24","modified":1500126374848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500126374848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500126374848},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500126374848},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500126374878},{"_id":"public/uploads/avatar.png","hash":"15f36672ac0af1b2f58ebde88e880f33b3a4ce1c","modified":1500126374946}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2017-07-15T10:26:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-07-15 18:26:48\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-15T13:27:00.000Z","path":"categories/index.html","layout":"page","_id":"cj55cid1p0001m4jcvi1ku0qf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-07-15T10:36:29.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-07-15 18:36:29\ntype: \"about\"\n---\n","updated":"2017-07-15T13:27:00.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj55cid1v0003m4jcri4zalpk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-07-15T10:25:49.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-15 18:25:49\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-15T13:27:00.000Z","path":"tags/index.html","layout":"page","_id":"cj55cid740006m4jc444396ki","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS 实现内容垂直居中","date":"2016-06-12T16:00:00.000Z","_content":"\n我们经常遇到的问题有实现 `css` 垂直居中，一个效果的实现可以有多种方法，了解每一个方法的原理也可以帮我们更快速的定位在我们需要的场景中需要使用哪种方法。接下来我就把我知道的一些方法和在网上总结的一些办法实现一下，俗话说：好记性不如烂笔头。写下来才能记忆深刻。\n\n<!--more-->\n\n首先： 实现水平居中有以下方法。如果是内联元素，设置父元素 `text-align :center`；\n如果是块状元素：`margin: auto`;\n\n接下来看垂直居中。\n\n44年前我们把人送上月球，但在CSS中我们仍然不能很好实现垂直居中——@James Anderson\n\n1、文本水平垂直居中\n```\n.outer{\n  background-color: hotpink;\n  margin:auto;\n  height: 100px;\n  width:200px;\n}\n.text{\n  text-align: center;\n  line-height: 100px;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-eee9e72c4e53e06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2、盒模型水平垂直居中\n\n垂直居中在现在的需求上还是经常需要的，看似简单，可是当涉及到尺寸不固定的情况时，就变的非常棘手了。\n```\n<div class=\"box\">\n  <div class=\"outer\"></div>\n</div>\n```\n绝对定位的方法：\n\n要求具有固定的宽度和高度：\n```\n.outer{\n  position: absolute;\n  top:50%;\n  left:50%;\n  margin-left: -100px;\n  margin-top: -50px;\n  width:200px;\n  height: 100px;\n  background-color: pink;\n}\n```\n先把元素的左上角固定在正中心，然后再利用 `margin` 把左上角向左方和上方移动本身宽度的一半，这样就实现了垂直居中。\n分析：需要给元素一个固定的尺寸，灵活性不是很高。\n\n![](http://upload-images.jianshu.io/upload_images/1561693-d5a5bc97bf101ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果可以让元素按照自身尺寸的百分比来移动，那元素的尺寸就可以不用固定了。于是采用了 `transform` 中的 `translate( )` ；\n```\n.outer{\n  position: absolute;\n  top:50%;\n  left:50%;\n  transform:translate(-50%,-50%);\n  background-color: hotpink;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-d935c285533b4c27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n绝对定位不是一个很好的选择，因为对整体布局的影响还是很大的。\n\nFlex布局\n通过 `Flex` 布局可以很轻松的实现垂直居中\n```\n.box{\n  display: flex;\n  width:800px;\n  height:500px;\n  background-color: bisque;\n  margin:100px auto;\n}\n.outer{\n  background-color: hotpink;\n  margin:auto;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-cf71c3fc114e94a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`flex` 的兼容性![](http://upload-images.jianshu.io/upload_images/1561693-b3e4fa77e390df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/CSS-实现内容垂直居中.md","raw":"---\ntitle: CSS 实现内容垂直居中\ndate: 2016-06-13\ntags:\n---\n\n我们经常遇到的问题有实现 `css` 垂直居中，一个效果的实现可以有多种方法，了解每一个方法的原理也可以帮我们更快速的定位在我们需要的场景中需要使用哪种方法。接下来我就把我知道的一些方法和在网上总结的一些办法实现一下，俗话说：好记性不如烂笔头。写下来才能记忆深刻。\n\n<!--more-->\n\n首先： 实现水平居中有以下方法。如果是内联元素，设置父元素 `text-align :center`；\n如果是块状元素：`margin: auto`;\n\n接下来看垂直居中。\n\n44年前我们把人送上月球，但在CSS中我们仍然不能很好实现垂直居中——@James Anderson\n\n1、文本水平垂直居中\n```\n.outer{\n  background-color: hotpink;\n  margin:auto;\n  height: 100px;\n  width:200px;\n}\n.text{\n  text-align: center;\n  line-height: 100px;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-eee9e72c4e53e06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2、盒模型水平垂直居中\n\n垂直居中在现在的需求上还是经常需要的，看似简单，可是当涉及到尺寸不固定的情况时，就变的非常棘手了。\n```\n<div class=\"box\">\n  <div class=\"outer\"></div>\n</div>\n```\n绝对定位的方法：\n\n要求具有固定的宽度和高度：\n```\n.outer{\n  position: absolute;\n  top:50%;\n  left:50%;\n  margin-left: -100px;\n  margin-top: -50px;\n  width:200px;\n  height: 100px;\n  background-color: pink;\n}\n```\n先把元素的左上角固定在正中心，然后再利用 `margin` 把左上角向左方和上方移动本身宽度的一半，这样就实现了垂直居中。\n分析：需要给元素一个固定的尺寸，灵活性不是很高。\n\n![](http://upload-images.jianshu.io/upload_images/1561693-d5a5bc97bf101ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果可以让元素按照自身尺寸的百分比来移动，那元素的尺寸就可以不用固定了。于是采用了 `transform` 中的 `translate( )` ；\n```\n.outer{\n  position: absolute;\n  top:50%;\n  left:50%;\n  transform:translate(-50%,-50%);\n  background-color: hotpink;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-d935c285533b4c27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n绝对定位不是一个很好的选择，因为对整体布局的影响还是很大的。\n\nFlex布局\n通过 `Flex` 布局可以很轻松的实现垂直居中\n```\n.box{\n  display: flex;\n  width:800px;\n  height:500px;\n  background-color: bisque;\n  margin:100px auto;\n}\n.outer{\n  background-color: hotpink;\n  margin:auto;\n}\n```\n![](http://upload-images.jianshu.io/upload_images/1561693-cf71c3fc114e94a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`flex` 的兼容性![](http://upload-images.jianshu.io/upload_images/1561693-b3e4fa77e390df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"CSS-实现内容垂直居中","published":1,"updated":"2017-07-15T13:28:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj55cid1k0000m4jcq9f3b18n","content":"<p>我们经常遇到的问题有实现 <code>css</code> 垂直居中，一个效果的实现可以有多种方法，了解每一个方法的原理也可以帮我们更快速的定位在我们需要的场景中需要使用哪种方法。接下来我就把我知道的一些方法和在网上总结的一些办法实现一下，俗话说：好记性不如烂笔头。写下来才能记忆深刻。</p>\n<a id=\"more\"></a>\n<p>首先： 实现水平居中有以下方法。如果是内联元素，设置父元素 <code>text-align :center</code>；<br>如果是块状元素：<code>margin: auto</code>;</p>\n<p>接下来看垂直居中。</p>\n<p>44年前我们把人送上月球，但在CSS中我们仍然不能很好实现垂直居中——@James Anderson</p>\n<p>1、文本水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">  margin:auto;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">  width:200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.text&#123;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  line-height: 100px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-eee9e72c4e53e06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2、盒模型水平垂直居中</p>\n<p>垂直居中在现在的需求上还是经常需要的，看似简单，可是当涉及到尺寸不固定的情况时，就变的非常棘手了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;outer&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>绝对定位的方法：</p>\n<p>要求具有固定的宽度和高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top:50%;</div><div class=\"line\">  left:50%;</div><div class=\"line\">  margin-left: -100px;</div><div class=\"line\">  margin-top: -50px;</div><div class=\"line\">  width:200px;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">  background-color: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>先把元素的左上角固定在正中心，然后再利用 <code>margin</code> 把左上角向左方和上方移动本身宽度的一半，这样就实现了垂直居中。<br>分析：需要给元素一个固定的尺寸，灵活性不是很高。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d5a5bc97bf101ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如果可以让元素按照自身尺寸的百分比来移动，那元素的尺寸就可以不用固定了。于是采用了 <code>transform</code> 中的 <code>translate( )</code> ；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top:50%;</div><div class=\"line\">  left:50%;</div><div class=\"line\">  transform:translate(-50%,-50%);</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d935c285533b4c27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>绝对定位不是一个很好的选择，因为对整体布局的影响还是很大的。</p>\n<p>Flex布局<br>通过 <code>Flex</code> 布局可以很轻松的实现垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  width:800px;</div><div class=\"line\">  height:500px;</div><div class=\"line\">  background-color: bisque;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.outer&#123;</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">  margin:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-cf71c3fc114e94a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><code>flex</code> 的兼容性<img src=\"http://upload-images.jianshu.io/upload_images/1561693-b3e4fa77e390df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>我们经常遇到的问题有实现 <code>css</code> 垂直居中，一个效果的实现可以有多种方法，了解每一个方法的原理也可以帮我们更快速的定位在我们需要的场景中需要使用哪种方法。接下来我就把我知道的一些方法和在网上总结的一些办法实现一下，俗话说：好记性不如烂笔头。写下来才能记忆深刻。</p>","more":"<p>首先： 实现水平居中有以下方法。如果是内联元素，设置父元素 <code>text-align :center</code>；<br>如果是块状元素：<code>margin: auto</code>;</p>\n<p>接下来看垂直居中。</p>\n<p>44年前我们把人送上月球，但在CSS中我们仍然不能很好实现垂直居中——@James Anderson</p>\n<p>1、文本水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">  margin:auto;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">  width:200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.text&#123;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  line-height: 100px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-eee9e72c4e53e06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2、盒模型水平垂直居中</p>\n<p>垂直居中在现在的需求上还是经常需要的，看似简单，可是当涉及到尺寸不固定的情况时，就变的非常棘手了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;outer&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>绝对定位的方法：</p>\n<p>要求具有固定的宽度和高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top:50%;</div><div class=\"line\">  left:50%;</div><div class=\"line\">  margin-left: -100px;</div><div class=\"line\">  margin-top: -50px;</div><div class=\"line\">  width:200px;</div><div class=\"line\">  height: 100px;</div><div class=\"line\">  background-color: pink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>先把元素的左上角固定在正中心，然后再利用 <code>margin</code> 把左上角向左方和上方移动本身宽度的一半，这样就实现了垂直居中。<br>分析：需要给元素一个固定的尺寸，灵活性不是很高。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d5a5bc97bf101ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如果可以让元素按照自身尺寸的百分比来移动，那元素的尺寸就可以不用固定了。于是采用了 <code>transform</code> 中的 <code>translate( )</code> ；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top:50%;</div><div class=\"line\">  left:50%;</div><div class=\"line\">  transform:translate(-50%,-50%);</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d935c285533b4c27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>绝对定位不是一个很好的选择，因为对整体布局的影响还是很大的。</p>\n<p>Flex布局<br>通过 <code>Flex</code> 布局可以很轻松的实现垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  width:800px;</div><div class=\"line\">  height:500px;</div><div class=\"line\">  background-color: bisque;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.outer&#123;</div><div class=\"line\">  background-color: hotpink;</div><div class=\"line\">  margin:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-cf71c3fc114e94a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><code>flex</code> 的兼容性<img src=\"http://upload-images.jianshu.io/upload_images/1561693-b3e4fa77e390df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>"},{"title":"翻译 | 玩转 React 表单 —— Refs 的运用","date":"2017-06-26T16:00:00.000Z","_content":"\n * 原文地址：[React Forms: Using Refs](https://css-tricks.com/react-forms-using-refs/)\n * 原文作者：[Loren Stewart](https://github.com/lorenseanstewart)\n * 译者：[萌萌](https://github.com/yanyixin)\n * 校对者：[小 boy](https://github.com/pobusama)\n\nReact 提供了两种从 `<form>` 元素中获取值的标准方法。第一种方法是实现所谓的**受控组件** (可以看我[博客里发表的文章](http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/)) ，第二种方法是使用 React 的 `ref`  属性。\n\n<!--more-->\n\n受控组件很重，被展示的值和组件的 state 绑定是它的特性。我们通过执行一个附着在 form 元素上的 `onChange` 事件句柄，来更新被展示的值。`onChange` 函数更新 state 属性，进而更新 form 元素的值。\n\n（在看到下面的文章之前，如果你只是想看相应的示例代码：[请移步这里](https://github.com/lorenseanstewart/react-forms-using-refs)）\n\n受控组件示例：\n\n``` JSX\nimport React, { Component } from 'react';\n\nclass ControlledCompExample extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fullName: ''\n    }\n  }\n  handleFullNameChange = (e) => {\n    this.setState({\n      fullName: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state.fullName)\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"fullName\">Full Name</label>\n          <input\n            type=\"text\"\n            value={this.state.fullName}\n            onChange={this.handleFullNameChange}\n            name=\"fullName\" />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ControlledCompExample;\n```\ninput 的值是 `this.state.fullName` （在第7行和第26行）。 `onChange ` 函数是 `handleFullNameChange ` （第 10 - 14 行和第 27 行）。\n\n受控组件最主要的优势是：\n1、便于**验证**用户的输入\n2、可以根据受控组件的值**动态地渲染其他组件**。例如：一个用户在下拉列表中选择的值（如“dog” 或者 “cat” ）可以控制在 form 中渲染的其他 form 组件（例如：一个设置品种的复选框）\n\n受控组件的缺点是要写大量的代码。你需要通过 props  把 state 属性传递给 form 元素，还需要一个函数来更新这个属性的值。\n\n对于单一表单元素来说这真的不是什么问题 —— 但是如果你需要一个庞大并且复杂的表单（不需要动态渲染或者实时验证），过度使用受控表单会让你书写成吨的代码。\n\n从 form 元素取值的简便的方法是使用 `ref` 属性。我们用不同的方式来应对不同的 form 元素和组件结构，所以这篇文章剩下的内容分为以下几个部分。\n\n1、[文本输入框、数字输入框和选择框](#react-refs-1)\n2、[子组件通过 props 传值给父组件](#react-refs-2)\n3、[ Radio 标签集合](#react-refs-3)\n4、[ Checkbox 标签集合](#react-refs-4)\n\n###  1、文本输入框、数字输入框和选择框\n\n使用 `ref` 的最简单的例子是文本和数字 input 元素。我们在 input 的 `ref` 属性里添加一个把 input 本身作为参数的箭头函数。我喜欢把参数命名为和元素本身一样的的名字，就像下面的第三行那个样子：\n\n```JSX\n<input\n  type=\"text\"\n  ref={input => this.fullName = input} />\n```\n\n由于该参数是 input 元素本身的别名，你可以随心所欲地为它命名：\n\n```JSX\n<input\n  type=\"number\"\n  ref={cashMoney => this.amount = cashMoney} />\n```\n\n接着你可以拿到该参数，并将它赋值给当前 class 内 `this` 关键字上挂载的属性（译者注：这里的 class 指的是 JSX 所处的 React 组件 class）。input（例如： DOM 节点）可以通过 `this.fullName` 和 `this.amount` 来读取。它的值可以通过 `this.fullName.value` 和 `this.amount.value` 来读取。\n\n选择元素也可以用相同的方法（例如：下拉列表）。\n\n```JSX\n<select\n  ref={select => this.petType = select}\n  name=\"petType\">\n  <option value=\"cat\">Cat</option>\n  <option value=\"dog\">Dog</option>\n  <option value=\"ferret\">Ferret</option>\n</select>\n```\n\n选择元素的值可以通过 `this.petType.value` 获取。\n\n### 2、子组件通过 props 传值给父组件\n\n通过受控组件，父组件获取子组件的值十分简单 —— 父组件中已经有这个值了（译者注：在父组件中定义）！它被传递给子组件。同时 `onChange` 方法也被传给子组件，用户通过与 UI 互动（译者注：触发 `onChange`）来更新该值。\n\n你可以在我[上篇文章](http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/)的受控组件示例中看到它是如何运行的。\n\n虽然该值已经存在于受控组件的父组件中，但是当使用 `ref` 的时候却不是这样。使用 `ref` 的时候，该值存在于 DOM 节点自身当中，必须向上与父组件通信。\n\n要将该值从子组件传给父组件，父组件需要向子组件传递一个 `钩子` 。然后子组件将节点挂载到  `钩子` 上， 以便父组件读取。\n\n在我们更深入的探讨之前先来看一些代码。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('first name:', this.firstName.value);\n    this.firstName.value = 'Got ya!';\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <CustomInput\n            label={'Name'}\n            firstName={input => this.firstName = input} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction CustomInput(props) {\n  return (\n    <div>\n      <label>{props.label}:</label>\n      <input type=\"text\" ref={props.firstName}/>\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n通过上面的代码，可以看到一个 form 组件 `RefForm` 和一个叫做 `CustomInput `  的 input 组件。通常，箭头函数都是在 input 自身上面，但是从这（15 - 27 行）可以看到它是通过 props 传递的。由于箭头函数存在于父组件中，所以 `this.firstName` 中的 `this` 指向父组件。\n \ninput 子组件的值被赋给父组件的 `this.firstName` 属性，所以父组件可以获得子组件的值。现在，父组件中的 `this.firstName` 指的是子组件中的 DOM 节点（例如： `CustomInput ` 中的 input）。\n\n父组件不仅可以访问 input 中的 DOM 节点，还可以在父组件内给节点的值赋值。在上文的第 7 行可以看到例子。一旦表单被提交， input 的值就被设置为 “Got ya!” 。\n\n这种方式有点让人摸不着头脑，所以请仔细揣摩并敲代码实践一下，直至完全理解。\n\n    你可能会写出来更好的 radio 和 checkbox  受控组件，但是如果你真的想要用 `ref` ，那么接下来的两部分会帮到你。\n\n### 3、 Radio 标签集合\n\n不像 text 和 number 这类 input 元素，radio 元素是成组出现的。每组中的元素都有相同的 `name` 属性，就像这样：\n\n```JSX\n<form>\n  <label>\n    Cat\n    <input type=\"radio\" value=\"cat\" name=\"pet\" />\n  </label>\n  <label>\n    Dog\n    <input type=\"radio\" value=\"dog\" name=\"pet\" />\n  </label>\n  <label>\n    Ferret\n    <input type=\"radio\" value=\"ferret\" name=\"pet\" />\n  </label>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n在 “pet” radio 标签集合中有三个选项 —— “cat”、“dog” 和 “ferret”。\n\n由于我们关心的是整个集合的元素，所以给每个 radio 设置 `ref` 并不是一个好主意。遗憾的是，没有 DOM 节点是包含了 radio 集合的。\n\n可以通过下面的**三步**来检索出 radio 集合的值：\n  1、在 `form` 标签上设置 ref （下面的第20行）。\n  2、从 form 中取出这个 radio 集合。然后它应该是 `pet` 集合（下面的第9行）。\n- 此处返回一个节点列表和一个值。在这种情况下，这个节点列表包含三个 input 节点和被选中的值。\n- 需要注意的是这个节点列表是个类数组，它没有数组的方法。在下一部分中还有更多关于这个话题的内容。\n3、使用 `.` 方法来获取这个集合的值（下面的第13行）。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // radio 标签集合有 value 属性\n    // 查看打印出来的数据\n    console.log(pet, pet.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <label>\n            Cat\n            <input type=\"radio\" value=\"cat\" name=\"pet\" />\n          </label>\n          <label>\n            Dog\n            <input type=\"radio\" value=\"dog\" name=\"pet\" />\n          </label>\n          <label>\n            Ferret\n            <input type=\"radio\" value=\"ferret\" name=\"pet\" />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default RefsForm;\n```\n\n如果你正在用子组件写一个表单也是可行的。尽管组件中会有更多的逻辑，但是从 radio 集合中获取值的方法是不变的。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // radio 标签集合有 value 属性\n    // 查看打印出来的数据\n    console.log(pet, pet.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <RadioSet\n            setName={'pet'}\n            setOptions={['cat', 'dog', 'ferret']} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction RadioSet(props) {\n  return (\n    <div>\n      {props.setOptions.map(option => {\n        return (\n          <label\n            key={option}\n            style={{textTransform: 'capitalize'}}>\n            {option}\n            <input\n              type=\"radio\"\n              value={option}\n              name={props.setName} />\n          </label>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n### 4、 Checkbox 标签集合\n\n和 radio 标签集合不一样， Checkbox 标签集合可能有多个值。导致获取这些值会比获取 radio 标签集合的值难一些。\n\n可以通过下面的**五步**来检索出 checkbox 标签集合被选中的值：\n\n1、在 `form` 标签上设置 ref （下面的第27行）。\n2、从 form 中取出这个checkbox 集合。然后它应该是 `pet` 集合（第9行）。\n- 此处返回一个节点列表和一个值\n- 需要注意的是这个节点列表是一个类数组，它没有数组的方法，然后我们就需要进行下面的这一步 ... \n3、把这个节点列表转换成一个数组，然后就可以使用数组的方法了（第 12 行的 `checkboxArray ` ）。\n4、使用  `Array.filter()` 获取选中的 checkbox  （第 15 行的 `checkedCheckboxes ` ）。\n5、使用  `Array.map()` 获取选中的 checkbox 的唯一的值（第 19 行的 `checkedCheckboxesValues ` ）\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // 把节点列表转换成一个数组\n    const checkboxArray = Array.prototype.slice.call(pet);\n\n    // 仅取出被选中的 checkbox\n    const checkedCheckboxes = checkboxArray.filter(input => input.checked);\n    console.log('checked array:', checkedCheckboxes);\n\n    // 使用 .map() 方法从每个被选中的 checkbox 中把值取出来\n    const checkedCheckboxesValues = checkedCheckboxes.map(input => input.value);\n    console.log('checked array values:', checkedCheckboxesValues);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <label>\n            Cat\n            <input type=\"checkbox\" value=\"cat\" name=\"pet\" />\n          </label>\n          <label>\n            Dog\n            <input type=\"checkbox\" value=\"dog\" name=\"pet\" />\n          </label>\n          <label>\n            Ferret\n            <input type=\"checkbox\" value=\"ferret\" name=\"pet\" />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default RefsForm;\n```\n \n使用子组件写 checkbox 的方法和上一部分中写 radio 的方法是一样的。\n\n``` JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // 把节点列表转换成一个数组\n    const checkboxArray = Array.prototype.slice.call(pet);\n\n    // 仅取出被选中的 checkbox\n    const checkedCheckboxes = checkboxArray.filter(input => input.checked);\n    console.log('checked array:', checkedCheckboxes);\n\n    // 使用 .map() 方法从每个被选中的 checkbox 中把值取出来\n    const checkedCheckboxesValues = checkedCheckboxes.map(input => input.value);\n    console.log('checked array values:', checkedCheckboxesValues);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <CheckboxSet\n            setName={'pet'}\n            setOptions={['cat', 'dog', 'ferret']} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction CheckboxSet(props) {\n  return (\n    <div>\n      {props.setOptions.map(option => {\n        return (\n          <label\n            key={option}\n            style={{textTransform: 'capitalize'}}>\n            {option}\n            <input\n              type=\"checkbox\"\n              value={option}\n              name={props.setName} />\n          </label>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n### 结论\n\n如果你不需要：\n\n1、实时监视 form 元素的值（例如：为了基于用户的输入渲染之后的组件）\n2、实时执行自定义验证方法\n\n那么使用 `ref` 方法获取 form 元素的值是一个很好的方法。\n\n大多数情况下，越过受控组件使用 `ref` 最主要的价值是会写更少的代码。 checkbox （ radio 其次）是一个特例。对于 checkbox ，使用 `ref` 省下的代码量是很少的，所以无法说是使用受控组件好还是 `ref` 好。","source":"_posts/玩转-React-表单：使用-Refs.md","raw":"---\ntitle: 翻译 | 玩转 React 表单 —— Refs 的运用\ndate: 2017-06-27\ntags:\n---\n\n * 原文地址：[React Forms: Using Refs](https://css-tricks.com/react-forms-using-refs/)\n * 原文作者：[Loren Stewart](https://github.com/lorenseanstewart)\n * 译者：[萌萌](https://github.com/yanyixin)\n * 校对者：[小 boy](https://github.com/pobusama)\n\nReact 提供了两种从 `<form>` 元素中获取值的标准方法。第一种方法是实现所谓的**受控组件** (可以看我[博客里发表的文章](http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/)) ，第二种方法是使用 React 的 `ref`  属性。\n\n<!--more-->\n\n受控组件很重，被展示的值和组件的 state 绑定是它的特性。我们通过执行一个附着在 form 元素上的 `onChange` 事件句柄，来更新被展示的值。`onChange` 函数更新 state 属性，进而更新 form 元素的值。\n\n（在看到下面的文章之前，如果你只是想看相应的示例代码：[请移步这里](https://github.com/lorenseanstewart/react-forms-using-refs)）\n\n受控组件示例：\n\n``` JSX\nimport React, { Component } from 'react';\n\nclass ControlledCompExample extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fullName: ''\n    }\n  }\n  handleFullNameChange = (e) => {\n    this.setState({\n      fullName: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state.fullName)\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"fullName\">Full Name</label>\n          <input\n            type=\"text\"\n            value={this.state.fullName}\n            onChange={this.handleFullNameChange}\n            name=\"fullName\" />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ControlledCompExample;\n```\ninput 的值是 `this.state.fullName` （在第7行和第26行）。 `onChange ` 函数是 `handleFullNameChange ` （第 10 - 14 行和第 27 行）。\n\n受控组件最主要的优势是：\n1、便于**验证**用户的输入\n2、可以根据受控组件的值**动态地渲染其他组件**。例如：一个用户在下拉列表中选择的值（如“dog” 或者 “cat” ）可以控制在 form 中渲染的其他 form 组件（例如：一个设置品种的复选框）\n\n受控组件的缺点是要写大量的代码。你需要通过 props  把 state 属性传递给 form 元素，还需要一个函数来更新这个属性的值。\n\n对于单一表单元素来说这真的不是什么问题 —— 但是如果你需要一个庞大并且复杂的表单（不需要动态渲染或者实时验证），过度使用受控表单会让你书写成吨的代码。\n\n从 form 元素取值的简便的方法是使用 `ref` 属性。我们用不同的方式来应对不同的 form 元素和组件结构，所以这篇文章剩下的内容分为以下几个部分。\n\n1、[文本输入框、数字输入框和选择框](#react-refs-1)\n2、[子组件通过 props 传值给父组件](#react-refs-2)\n3、[ Radio 标签集合](#react-refs-3)\n4、[ Checkbox 标签集合](#react-refs-4)\n\n###  1、文本输入框、数字输入框和选择框\n\n使用 `ref` 的最简单的例子是文本和数字 input 元素。我们在 input 的 `ref` 属性里添加一个把 input 本身作为参数的箭头函数。我喜欢把参数命名为和元素本身一样的的名字，就像下面的第三行那个样子：\n\n```JSX\n<input\n  type=\"text\"\n  ref={input => this.fullName = input} />\n```\n\n由于该参数是 input 元素本身的别名，你可以随心所欲地为它命名：\n\n```JSX\n<input\n  type=\"number\"\n  ref={cashMoney => this.amount = cashMoney} />\n```\n\n接着你可以拿到该参数，并将它赋值给当前 class 内 `this` 关键字上挂载的属性（译者注：这里的 class 指的是 JSX 所处的 React 组件 class）。input（例如： DOM 节点）可以通过 `this.fullName` 和 `this.amount` 来读取。它的值可以通过 `this.fullName.value` 和 `this.amount.value` 来读取。\n\n选择元素也可以用相同的方法（例如：下拉列表）。\n\n```JSX\n<select\n  ref={select => this.petType = select}\n  name=\"petType\">\n  <option value=\"cat\">Cat</option>\n  <option value=\"dog\">Dog</option>\n  <option value=\"ferret\">Ferret</option>\n</select>\n```\n\n选择元素的值可以通过 `this.petType.value` 获取。\n\n### 2、子组件通过 props 传值给父组件\n\n通过受控组件，父组件获取子组件的值十分简单 —— 父组件中已经有这个值了（译者注：在父组件中定义）！它被传递给子组件。同时 `onChange` 方法也被传给子组件，用户通过与 UI 互动（译者注：触发 `onChange`）来更新该值。\n\n你可以在我[上篇文章](http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/)的受控组件示例中看到它是如何运行的。\n\n虽然该值已经存在于受控组件的父组件中，但是当使用 `ref` 的时候却不是这样。使用 `ref` 的时候，该值存在于 DOM 节点自身当中，必须向上与父组件通信。\n\n要将该值从子组件传给父组件，父组件需要向子组件传递一个 `钩子` 。然后子组件将节点挂载到  `钩子` 上， 以便父组件读取。\n\n在我们更深入的探讨之前先来看一些代码。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('first name:', this.firstName.value);\n    this.firstName.value = 'Got ya!';\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <CustomInput\n            label={'Name'}\n            firstName={input => this.firstName = input} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction CustomInput(props) {\n  return (\n    <div>\n      <label>{props.label}:</label>\n      <input type=\"text\" ref={props.firstName}/>\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n通过上面的代码，可以看到一个 form 组件 `RefForm` 和一个叫做 `CustomInput `  的 input 组件。通常，箭头函数都是在 input 自身上面，但是从这（15 - 27 行）可以看到它是通过 props 传递的。由于箭头函数存在于父组件中，所以 `this.firstName` 中的 `this` 指向父组件。\n \ninput 子组件的值被赋给父组件的 `this.firstName` 属性，所以父组件可以获得子组件的值。现在，父组件中的 `this.firstName` 指的是子组件中的 DOM 节点（例如： `CustomInput ` 中的 input）。\n\n父组件不仅可以访问 input 中的 DOM 节点，还可以在父组件内给节点的值赋值。在上文的第 7 行可以看到例子。一旦表单被提交， input 的值就被设置为 “Got ya!” 。\n\n这种方式有点让人摸不着头脑，所以请仔细揣摩并敲代码实践一下，直至完全理解。\n\n    你可能会写出来更好的 radio 和 checkbox  受控组件，但是如果你真的想要用 `ref` ，那么接下来的两部分会帮到你。\n\n### 3、 Radio 标签集合\n\n不像 text 和 number 这类 input 元素，radio 元素是成组出现的。每组中的元素都有相同的 `name` 属性，就像这样：\n\n```JSX\n<form>\n  <label>\n    Cat\n    <input type=\"radio\" value=\"cat\" name=\"pet\" />\n  </label>\n  <label>\n    Dog\n    <input type=\"radio\" value=\"dog\" name=\"pet\" />\n  </label>\n  <label>\n    Ferret\n    <input type=\"radio\" value=\"ferret\" name=\"pet\" />\n  </label>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n在 “pet” radio 标签集合中有三个选项 —— “cat”、“dog” 和 “ferret”。\n\n由于我们关心的是整个集合的元素，所以给每个 radio 设置 `ref` 并不是一个好主意。遗憾的是，没有 DOM 节点是包含了 radio 集合的。\n\n可以通过下面的**三步**来检索出 radio 集合的值：\n  1、在 `form` 标签上设置 ref （下面的第20行）。\n  2、从 form 中取出这个 radio 集合。然后它应该是 `pet` 集合（下面的第9行）。\n- 此处返回一个节点列表和一个值。在这种情况下，这个节点列表包含三个 input 节点和被选中的值。\n- 需要注意的是这个节点列表是个类数组，它没有数组的方法。在下一部分中还有更多关于这个话题的内容。\n3、使用 `.` 方法来获取这个集合的值（下面的第13行）。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // radio 标签集合有 value 属性\n    // 查看打印出来的数据\n    console.log(pet, pet.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <label>\n            Cat\n            <input type=\"radio\" value=\"cat\" name=\"pet\" />\n          </label>\n          <label>\n            Dog\n            <input type=\"radio\" value=\"dog\" name=\"pet\" />\n          </label>\n          <label>\n            Ferret\n            <input type=\"radio\" value=\"ferret\" name=\"pet\" />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default RefsForm;\n```\n\n如果你正在用子组件写一个表单也是可行的。尽管组件中会有更多的逻辑，但是从 radio 集合中获取值的方法是不变的。\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // radio 标签集合有 value 属性\n    // 查看打印出来的数据\n    console.log(pet, pet.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <RadioSet\n            setName={'pet'}\n            setOptions={['cat', 'dog', 'ferret']} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction RadioSet(props) {\n  return (\n    <div>\n      {props.setOptions.map(option => {\n        return (\n          <label\n            key={option}\n            style={{textTransform: 'capitalize'}}>\n            {option}\n            <input\n              type=\"radio\"\n              value={option}\n              name={props.setName} />\n          </label>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n### 4、 Checkbox 标签集合\n\n和 radio 标签集合不一样， Checkbox 标签集合可能有多个值。导致获取这些值会比获取 radio 标签集合的值难一些。\n\n可以通过下面的**五步**来检索出 checkbox 标签集合被选中的值：\n\n1、在 `form` 标签上设置 ref （下面的第27行）。\n2、从 form 中取出这个checkbox 集合。然后它应该是 `pet` 集合（第9行）。\n- 此处返回一个节点列表和一个值\n- 需要注意的是这个节点列表是一个类数组，它没有数组的方法，然后我们就需要进行下面的这一步 ... \n3、把这个节点列表转换成一个数组，然后就可以使用数组的方法了（第 12 行的 `checkboxArray ` ）。\n4、使用  `Array.filter()` 获取选中的 checkbox  （第 15 行的 `checkedCheckboxes ` ）。\n5、使用  `Array.map()` 获取选中的 checkbox 的唯一的值（第 19 行的 `checkedCheckboxesValues ` ）\n\n```JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // 把节点列表转换成一个数组\n    const checkboxArray = Array.prototype.slice.call(pet);\n\n    // 仅取出被选中的 checkbox\n    const checkedCheckboxes = checkboxArray.filter(input => input.checked);\n    console.log('checked array:', checkedCheckboxes);\n\n    // 使用 .map() 方法从每个被选中的 checkbox 中把值取出来\n    const checkedCheckboxesValues = checkedCheckboxes.map(input => input.value);\n    console.log('checked array values:', checkedCheckboxesValues);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <label>\n            Cat\n            <input type=\"checkbox\" value=\"cat\" name=\"pet\" />\n          </label>\n          <label>\n            Dog\n            <input type=\"checkbox\" value=\"dog\" name=\"pet\" />\n          </label>\n          <label>\n            Ferret\n            <input type=\"checkbox\" value=\"ferret\" name=\"pet\" />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default RefsForm;\n```\n \n使用子组件写 checkbox 的方法和上一部分中写 radio 的方法是一样的。\n\n``` JSX\nimport React, { Component } from 'react';\n\nclass RefsForm extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //  从 form 中取出节点列表\n    //  它是一个类数组，没有数组的方法\n    const { pet } = this.form;\n\n    // 把节点列表转换成一个数组\n    const checkboxArray = Array.prototype.slice.call(pet);\n\n    // 仅取出被选中的 checkbox\n    const checkedCheckboxes = checkboxArray.filter(input => input.checked);\n    console.log('checked array:', checkedCheckboxes);\n\n    // 使用 .map() 方法从每个被选中的 checkbox 中把值取出来\n    const checkedCheckboxesValues = checkedCheckboxes.map(input => input.value);\n    console.log('checked array values:', checkedCheckboxesValues);\n  }\n\n  render() {\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          ref={form => this.form = form}>\n          <CheckboxSet\n            setName={'pet'}\n            setOptions={['cat', 'dog', 'ferret']} />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction CheckboxSet(props) {\n  return (\n    <div>\n      {props.setOptions.map(option => {\n        return (\n          <label\n            key={option}\n            style={{textTransform: 'capitalize'}}>\n            {option}\n            <input\n              type=\"checkbox\"\n              value={option}\n              name={props.setName} />\n          </label>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default RefsForm;\n```\n\n### 结论\n\n如果你不需要：\n\n1、实时监视 form 元素的值（例如：为了基于用户的输入渲染之后的组件）\n2、实时执行自定义验证方法\n\n那么使用 `ref` 方法获取 form 元素的值是一个很好的方法。\n\n大多数情况下，越过受控组件使用 `ref` 最主要的价值是会写更少的代码。 checkbox （ radio 其次）是一个特例。对于 checkbox ，使用 `ref` 省下的代码量是很少的，所以无法说是使用受控组件好还是 `ref` 好。","slug":"玩转-React-表单：使用-Refs","published":1,"updated":"2017-07-15T13:28:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj55cid1s0002m4jcd8y0ttj9","content":"<ul>\n<li>原文地址：<a href=\"https://css-tricks.com/react-forms-using-refs/\" target=\"_blank\" rel=\"external\">React Forms: Using Refs</a></li>\n<li>原文作者：<a href=\"https://github.com/lorenseanstewart\" target=\"_blank\" rel=\"external\">Loren Stewart</a></li>\n<li>译者：<a href=\"https://github.com/yanyixin\" target=\"_blank\" rel=\"external\">萌萌</a></li>\n<li>校对者：<a href=\"https://github.com/pobusama\" target=\"_blank\" rel=\"external\">小 boy</a></li>\n</ul>\n<p>React 提供了两种从 <code>&lt;form&gt;</code> 元素中获取值的标准方法。第一种方法是实现所谓的<strong>受控组件</strong> (可以看我<a href=\"http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\" target=\"_blank\" rel=\"external\">博客里发表的文章</a>) ，第二种方法是使用 React 的 <code>ref</code>  属性。</p>\n<a id=\"more\"></a>\n<p>受控组件很重，被展示的值和组件的 state 绑定是它的特性。我们通过执行一个附着在 form 元素上的 <code>onChange</code> 事件句柄，来更新被展示的值。<code>onChange</code> 函数更新 state 属性，进而更新 form 元素的值。</p>\n<p>（在看到下面的文章之前，如果你只是想看相应的示例代码：<a href=\"https://github.com/lorenseanstewart/react-forms-using-refs\" target=\"_blank\" rel=\"external\">请移步这里</a>）</p>\n<p>受控组件示例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ControlledCompExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">fullName</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleFullNameChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">      <span class=\"attr\">fullName</span>: e.target.value</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.fullName)</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\">          &lt;label htmlFor=\"fullName\"&gt;Full Name&lt;/label&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            type=\"text\"</div><div class=\"line\">            value=&#123;this.state.fullName&#125;</div><div class=\"line\">            onChange=&#123;this.handleFullNameChange&#125;</div><div class=\"line\">            name=\"fullName\" /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default ControlledCompExample;</div></pre></td></tr></table></figure>\n<p>input 的值是 <code>this.state.fullName</code> （在第7行和第26行）。 <code>onChange</code> 函数是 <code>handleFullNameChange</code> （第 10 - 14 行和第 27 行）。</p>\n<p>受控组件最主要的优势是：<br>1、便于<strong>验证</strong>用户的输入<br>2、可以根据受控组件的值<strong>动态地渲染其他组件</strong>。例如：一个用户在下拉列表中选择的值（如“dog” 或者 “cat” ）可以控制在 form 中渲染的其他 form 组件（例如：一个设置品种的复选框）</p>\n<p>受控组件的缺点是要写大量的代码。你需要通过 props  把 state 属性传递给 form 元素，还需要一个函数来更新这个属性的值。</p>\n<p>对于单一表单元素来说这真的不是什么问题 —— 但是如果你需要一个庞大并且复杂的表单（不需要动态渲染或者实时验证），过度使用受控表单会让你书写成吨的代码。</p>\n<p>从 form 元素取值的简便的方法是使用 <code>ref</code> 属性。我们用不同的方式来应对不同的 form 元素和组件结构，所以这篇文章剩下的内容分为以下几个部分。</p>\n<p>1、<a href=\"#react-refs-1\">文本输入框、数字输入框和选择框</a><br>2、<a href=\"#react-refs-2\">子组件通过 props 传值给父组件</a><br>3、<a href=\"#react-refs-3\"> Radio 标签集合</a><br>4、<a href=\"#react-refs-4\"> Checkbox 标签集合</a></p>\n<h3 id=\"1、文本输入框、数字输入框和选择框\"><a href=\"#1、文本输入框、数字输入框和选择框\" class=\"headerlink\" title=\"1、文本输入框、数字输入框和选择框\"></a>1、文本输入框、数字输入框和选择框</h3><p>使用 <code>ref</code> 的最简单的例子是文本和数字 input 元素。我们在 input 的 <code>ref</code> 属性里添加一个把 input 本身作为参数的箭头函数。我喜欢把参数命名为和元素本身一样的的名字，就像下面的第三行那个样子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=<span class=\"string\">\"text\"</span></div><div class=\"line\">  ref=&#123;input =&gt; <span class=\"keyword\">this</span>.fullName = input&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>由于该参数是 input 元素本身的别名，你可以随心所欲地为它命名：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=<span class=\"string\">\"number\"</span></div><div class=\"line\">  ref=&#123;cashMoney =&gt; <span class=\"keyword\">this</span>.amount = cashMoney&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>接着你可以拿到该参数，并将它赋值给当前 class 内 <code>this</code> 关键字上挂载的属性（译者注：这里的 class 指的是 JSX 所处的 React 组件 class）。input（例如： DOM 节点）可以通过 <code>this.fullName</code> 和 <code>this.amount</code> 来读取。它的值可以通过 <code>this.fullName.value</code> 和 <code>this.amount.value</code> 来读取。</p>\n<p>选择元素也可以用相同的方法（例如：下拉列表）。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select</div><div class=\"line\">  ref=&#123;select =&gt; this.petType = select&#125;</div><div class=\"line\">  name=\"petType\"&gt;</div><div class=\"line\">  &lt;option value=\"cat\"&gt;Cat&lt;/option&gt;</div><div class=\"line\">  &lt;option value=\"dog\"&gt;Dog&lt;/option&gt;</div><div class=\"line\">  &lt;option value=\"ferret\"&gt;Ferret&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>选择元素的值可以通过 <code>this.petType.value</code> 获取。</p>\n<h3 id=\"2、子组件通过-props-传值给父组件\"><a href=\"#2、子组件通过-props-传值给父组件\" class=\"headerlink\" title=\"2、子组件通过 props 传值给父组件\"></a>2、子组件通过 props 传值给父组件</h3><p>通过受控组件，父组件获取子组件的值十分简单 —— 父组件中已经有这个值了（译者注：在父组件中定义）！它被传递给子组件。同时 <code>onChange</code> 方法也被传给子组件，用户通过与 UI 互动（译者注：触发 <code>onChange</code>）来更新该值。</p>\n<p>你可以在我<a href=\"http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\" target=\"_blank\" rel=\"external\">上篇文章</a>的受控组件示例中看到它是如何运行的。</p>\n<p>虽然该值已经存在于受控组件的父组件中，但是当使用 <code>ref</code> 的时候却不是这样。使用 <code>ref</code> 的时候，该值存在于 DOM 节点自身当中，必须向上与父组件通信。</p>\n<p>要将该值从子组件传给父组件，父组件需要向子组件传递一个 <code>钩子</code> 。然后子组件将节点挂载到  <code>钩子</code> 上， 以便父组件读取。</p>\n<p>在我们更深入的探讨之前先来看一些代码。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'first name:'</span>, <span class=\"keyword\">this</span>.firstName.value);</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstName.value = <span class=\"string\">'Got ya!'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\">          &lt;CustomInput</div><div class=\"line\">            label=&#123;'Name'&#125;</div><div class=\"line\">            firstName=&#123;input =&gt; this.firstName = input&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function CustomInput(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;label&gt;&#123;props.label&#125;:&lt;/label&gt;</div><div class=\"line\">      &lt;input type=\"text\" ref=&#123;props.firstName&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>通过上面的代码，可以看到一个 form 组件 <code>RefForm</code> 和一个叫做 <code>CustomInput</code>  的 input 组件。通常，箭头函数都是在 input 自身上面，但是从这（15 - 27 行）可以看到它是通过 props 传递的。由于箭头函数存在于父组件中，所以 <code>this.firstName</code> 中的 <code>this</code> 指向父组件。</p>\n<p>input 子组件的值被赋给父组件的 <code>this.firstName</code> 属性，所以父组件可以获得子组件的值。现在，父组件中的 <code>this.firstName</code> 指的是子组件中的 DOM 节点（例如： <code>CustomInput</code> 中的 input）。</p>\n<p>父组件不仅可以访问 input 中的 DOM 节点，还可以在父组件内给节点的值赋值。在上文的第 7 行可以看到例子。一旦表单被提交， input 的值就被设置为 “Got ya!” 。</p>\n<p>这种方式有点让人摸不着头脑，所以请仔细揣摩并敲代码实践一下，直至完全理解。</p>\n<pre><code>你可能会写出来更好的 radio 和 checkbox  受控组件，但是如果你真的想要用 `ref` ，那么接下来的两部分会帮到你。\n</code></pre><h3 id=\"3、-Radio-标签集合\"><a href=\"#3、-Radio-标签集合\" class=\"headerlink\" title=\"3、 Radio 标签集合\"></a>3、 Radio 标签集合</h3><p>不像 text 和 number 这类 input 元素，radio 元素是成组出现的。每组中的元素都有相同的 <code>name</code> 属性，就像这样：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Cat</div><div class=\"line\">    &lt;input type=\"radio\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Dog</div><div class=\"line\">    &lt;input type=\"radio\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Ferret</div><div class=\"line\">    &lt;input type=\"radio\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>在 “pet” radio 标签集合中有三个选项 —— “cat”、“dog” 和 “ferret”。</p>\n<p>由于我们关心的是整个集合的元素，所以给每个 radio 设置 <code>ref</code> 并不是一个好主意。遗憾的是，没有 DOM 节点是包含了 radio 集合的。</p>\n<p>可以通过下面的<strong>三步</strong>来检索出 radio 集合的值：<br>  1、在 <code>form</code> 标签上设置 ref （下面的第20行）。<br>  2、从 form 中取出这个 radio 集合。然后它应该是 <code>pet</code> 集合（下面的第9行）。</p>\n<ul>\n<li>此处返回一个节点列表和一个值。在这种情况下，这个节点列表包含三个 input 节点和被选中的值。</li>\n<li>需要注意的是这个节点列表是个类数组，它没有数组的方法。在下一部分中还有更多关于这个话题的内容。<br>3、使用 <code>.</code> 方法来获取这个集合的值（下面的第13行）。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// radio 标签集合有 value 属性</span></div><div class=\"line\">    <span class=\"comment\">// 查看打印出来的数据</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet, pet.value);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Cat</div><div class=\"line\">            &lt;input type=\"radio\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Dog</div><div class=\"line\">            &lt;input type=\"radio\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Ferret</div><div class=\"line\">            &lt;input type=\"radio\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>如果你正在用子组件写一个表单也是可行的。尽管组件中会有更多的逻辑，但是从 radio 集合中获取值的方法是不变的。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// radio 标签集合有 value 属性</span></div><div class=\"line\">    <span class=\"comment\">// 查看打印出来的数据</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet, pet.value);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;RadioSet</div><div class=\"line\">            setName=&#123;'pet'&#125;</div><div class=\"line\">            setOptions=&#123;['cat', 'dog', 'ferret']&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function RadioSet(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &#123;props.setOptions.map(option =&gt; &#123;</div><div class=\"line\">        return (</div><div class=\"line\">          &lt;label</div><div class=\"line\">            key=&#123;option&#125;</div><div class=\"line\">            style=&#123;&#123;textTransform: 'capitalize'&#125;&#125;&gt;</div><div class=\"line\">            &#123;option&#125;</div><div class=\"line\">            &lt;input</div><div class=\"line\">              type=\"radio\"</div><div class=\"line\">              value=&#123;option&#125;</div><div class=\"line\">              name=&#123;props.setName&#125; /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<h3 id=\"4、-Checkbox-标签集合\"><a href=\"#4、-Checkbox-标签集合\" class=\"headerlink\" title=\"4、 Checkbox 标签集合\"></a>4、 Checkbox 标签集合</h3><p>和 radio 标签集合不一样， Checkbox 标签集合可能有多个值。导致获取这些值会比获取 radio 标签集合的值难一些。</p>\n<p>可以通过下面的<strong>五步</strong>来检索出 checkbox 标签集合被选中的值：</p>\n<p>1、在 <code>form</code> 标签上设置 ref （下面的第27行）。<br>2、从 form 中取出这个checkbox 集合。然后它应该是 <code>pet</code> 集合（第9行）。</p>\n<ul>\n<li>此处返回一个节点列表和一个值</li>\n<li>需要注意的是这个节点列表是一个类数组，它没有数组的方法，然后我们就需要进行下面的这一步 …<br>3、把这个节点列表转换成一个数组，然后就可以使用数组的方法了（第 12 行的 <code>checkboxArray</code> ）。<br>4、使用  <code>Array.filter()</code> 获取选中的 checkbox  （第 15 行的 <code>checkedCheckboxes</code> ）。<br>5、使用  <code>Array.map()</code> 获取选中的 checkbox 的唯一的值（第 19 行的 <code>checkedCheckboxesValues</code> ）</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 把节点列表转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkboxArray = <span class=\"built_in\">Array</span>.prototype.slice.call(pet);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仅取出被选中的 checkbox</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxes = checkboxArray.filter(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.checked);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array:'</span>, checkedCheckboxes);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 .map() 方法从每个被选中的 checkbox 中把值取出来</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxesValues = checkedCheckboxes.map(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.value);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array values:'</span>, checkedCheckboxesValues);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Cat</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Dog</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Ferret</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>使用子组件写 checkbox 的方法和上一部分中写 radio 的方法是一样的。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 把节点列表转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkboxArray = <span class=\"built_in\">Array</span>.prototype.slice.call(pet);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仅取出被选中的 checkbox</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxes = checkboxArray.filter(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.checked);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array:'</span>, checkedCheckboxes);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 .map() 方法从每个被选中的 checkbox 中把值取出来</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxesValues = checkedCheckboxes.map(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.value);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array values:'</span>, checkedCheckboxesValues);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;CheckboxSet</div><div class=\"line\">            setName=&#123;'pet'&#125;</div><div class=\"line\">            setOptions=&#123;['cat', 'dog', 'ferret']&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function CheckboxSet(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &#123;props.setOptions.map(option =&gt; &#123;</div><div class=\"line\">        return (</div><div class=\"line\">          &lt;label</div><div class=\"line\">            key=&#123;option&#125;</div><div class=\"line\">            style=&#123;&#123;textTransform: 'capitalize'&#125;&#125;&gt;</div><div class=\"line\">            &#123;option&#125;</div><div class=\"line\">            &lt;input</div><div class=\"line\">              type=\"checkbox\"</div><div class=\"line\">              value=&#123;option&#125;</div><div class=\"line\">              name=&#123;props.setName&#125; /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>如果你不需要：</p>\n<p>1、实时监视 form 元素的值（例如：为了基于用户的输入渲染之后的组件）<br>2、实时执行自定义验证方法</p>\n<p>那么使用 <code>ref</code> 方法获取 form 元素的值是一个很好的方法。</p>\n<p>大多数情况下，越过受控组件使用 <code>ref</code> 最主要的价值是会写更少的代码。 checkbox （ radio 其次）是一个特例。对于 checkbox ，使用 <code>ref</code> 省下的代码量是很少的，所以无法说是使用受控组件好还是 <code>ref</code> 好。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>原文地址：<a href=\"https://css-tricks.com/react-forms-using-refs/\" target=\"_blank\" rel=\"external\">React Forms: Using Refs</a></li>\n<li>原文作者：<a href=\"https://github.com/lorenseanstewart\" target=\"_blank\" rel=\"external\">Loren Stewart</a></li>\n<li>译者：<a href=\"https://github.com/yanyixin\" target=\"_blank\" rel=\"external\">萌萌</a></li>\n<li>校对者：<a href=\"https://github.com/pobusama\" target=\"_blank\" rel=\"external\">小 boy</a></li>\n</ul>\n<p>React 提供了两种从 <code>&lt;form&gt;</code> 元素中获取值的标准方法。第一种方法是实现所谓的<strong>受控组件</strong> (可以看我<a href=\"http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\" target=\"_blank\" rel=\"external\">博客里发表的文章</a>) ，第二种方法是使用 React 的 <code>ref</code>  属性。</p>","more":"<p>受控组件很重，被展示的值和组件的 state 绑定是它的特性。我们通过执行一个附着在 form 元素上的 <code>onChange</code> 事件句柄，来更新被展示的值。<code>onChange</code> 函数更新 state 属性，进而更新 form 元素的值。</p>\n<p>（在看到下面的文章之前，如果你只是想看相应的示例代码：<a href=\"https://github.com/lorenseanstewart/react-forms-using-refs\" target=\"_blank\" rel=\"external\">请移步这里</a>）</p>\n<p>受控组件示例：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ControlledCompExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">fullName</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleFullNameChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">      <span class=\"attr\">fullName</span>: e.target.value</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.fullName)</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\">          &lt;label htmlFor=\"fullName\"&gt;Full Name&lt;/label&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            type=\"text\"</div><div class=\"line\">            value=&#123;this.state.fullName&#125;</div><div class=\"line\">            onChange=&#123;this.handleFullNameChange&#125;</div><div class=\"line\">            name=\"fullName\" /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default ControlledCompExample;</div></pre></td></tr></table></figure>\n<p>input 的值是 <code>this.state.fullName</code> （在第7行和第26行）。 <code>onChange</code> 函数是 <code>handleFullNameChange</code> （第 10 - 14 行和第 27 行）。</p>\n<p>受控组件最主要的优势是：<br>1、便于<strong>验证</strong>用户的输入<br>2、可以根据受控组件的值<strong>动态地渲染其他组件</strong>。例如：一个用户在下拉列表中选择的值（如“dog” 或者 “cat” ）可以控制在 form 中渲染的其他 form 组件（例如：一个设置品种的复选框）</p>\n<p>受控组件的缺点是要写大量的代码。你需要通过 props  把 state 属性传递给 form 元素，还需要一个函数来更新这个属性的值。</p>\n<p>对于单一表单元素来说这真的不是什么问题 —— 但是如果你需要一个庞大并且复杂的表单（不需要动态渲染或者实时验证），过度使用受控表单会让你书写成吨的代码。</p>\n<p>从 form 元素取值的简便的方法是使用 <code>ref</code> 属性。我们用不同的方式来应对不同的 form 元素和组件结构，所以这篇文章剩下的内容分为以下几个部分。</p>\n<p>1、<a href=\"#react-refs-1\">文本输入框、数字输入框和选择框</a><br>2、<a href=\"#react-refs-2\">子组件通过 props 传值给父组件</a><br>3、<a href=\"#react-refs-3\"> Radio 标签集合</a><br>4、<a href=\"#react-refs-4\"> Checkbox 标签集合</a></p>\n<h3 id=\"1、文本输入框、数字输入框和选择框\"><a href=\"#1、文本输入框、数字输入框和选择框\" class=\"headerlink\" title=\"1、文本输入框、数字输入框和选择框\"></a>1、文本输入框、数字输入框和选择框</h3><p>使用 <code>ref</code> 的最简单的例子是文本和数字 input 元素。我们在 input 的 <code>ref</code> 属性里添加一个把 input 本身作为参数的箭头函数。我喜欢把参数命名为和元素本身一样的的名字，就像下面的第三行那个样子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=<span class=\"string\">\"text\"</span></div><div class=\"line\">  ref=&#123;input =&gt; <span class=\"keyword\">this</span>.fullName = input&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>由于该参数是 input 元素本身的别名，你可以随心所欲地为它命名：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input</div><div class=\"line\">  type=<span class=\"string\">\"number\"</span></div><div class=\"line\">  ref=&#123;cashMoney =&gt; <span class=\"keyword\">this</span>.amount = cashMoney&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>接着你可以拿到该参数，并将它赋值给当前 class 内 <code>this</code> 关键字上挂载的属性（译者注：这里的 class 指的是 JSX 所处的 React 组件 class）。input（例如： DOM 节点）可以通过 <code>this.fullName</code> 和 <code>this.amount</code> 来读取。它的值可以通过 <code>this.fullName.value</code> 和 <code>this.amount.value</code> 来读取。</p>\n<p>选择元素也可以用相同的方法（例如：下拉列表）。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select</div><div class=\"line\">  ref=&#123;select =&gt; this.petType = select&#125;</div><div class=\"line\">  name=\"petType\"&gt;</div><div class=\"line\">  &lt;option value=\"cat\"&gt;Cat&lt;/option&gt;</div><div class=\"line\">  &lt;option value=\"dog\"&gt;Dog&lt;/option&gt;</div><div class=\"line\">  &lt;option value=\"ferret\"&gt;Ferret&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>选择元素的值可以通过 <code>this.petType.value</code> 获取。</p>\n<h3 id=\"2、子组件通过-props-传值给父组件\"><a href=\"#2、子组件通过-props-传值给父组件\" class=\"headerlink\" title=\"2、子组件通过 props 传值给父组件\"></a>2、子组件通过 props 传值给父组件</h3><p>通过受控组件，父组件获取子组件的值十分简单 —— 父组件中已经有这个值了（译者注：在父组件中定义）！它被传递给子组件。同时 <code>onChange</code> 方法也被传给子组件，用户通过与 UI 互动（译者注：触发 <code>onChange</code>）来更新该值。</p>\n<p>你可以在我<a href=\"http://lorenstewart.me/2016/10/31/react-js-forms-controlled-components/\" target=\"_blank\" rel=\"external\">上篇文章</a>的受控组件示例中看到它是如何运行的。</p>\n<p>虽然该值已经存在于受控组件的父组件中，但是当使用 <code>ref</code> 的时候却不是这样。使用 <code>ref</code> 的时候，该值存在于 DOM 节点自身当中，必须向上与父组件通信。</p>\n<p>要将该值从子组件传给父组件，父组件需要向子组件传递一个 <code>钩子</code> 。然后子组件将节点挂载到  <code>钩子</code> 上， 以便父组件读取。</p>\n<p>在我们更深入的探讨之前先来看一些代码。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'first name:'</span>, <span class=\"keyword\">this</span>.firstName.value);</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstName.value = <span class=\"string\">'Got ya!'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class=\"line\">          &lt;CustomInput</div><div class=\"line\">            label=&#123;'Name'&#125;</div><div class=\"line\">            firstName=&#123;input =&gt; this.firstName = input&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function CustomInput(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;label&gt;&#123;props.label&#125;:&lt;/label&gt;</div><div class=\"line\">      &lt;input type=\"text\" ref=&#123;props.firstName&#125;/&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>通过上面的代码，可以看到一个 form 组件 <code>RefForm</code> 和一个叫做 <code>CustomInput</code>  的 input 组件。通常，箭头函数都是在 input 自身上面，但是从这（15 - 27 行）可以看到它是通过 props 传递的。由于箭头函数存在于父组件中，所以 <code>this.firstName</code> 中的 <code>this</code> 指向父组件。</p>\n<p>input 子组件的值被赋给父组件的 <code>this.firstName</code> 属性，所以父组件可以获得子组件的值。现在，父组件中的 <code>this.firstName</code> 指的是子组件中的 DOM 节点（例如： <code>CustomInput</code> 中的 input）。</p>\n<p>父组件不仅可以访问 input 中的 DOM 节点，还可以在父组件内给节点的值赋值。在上文的第 7 行可以看到例子。一旦表单被提交， input 的值就被设置为 “Got ya!” 。</p>\n<p>这种方式有点让人摸不着头脑，所以请仔细揣摩并敲代码实践一下，直至完全理解。</p>\n<pre><code>你可能会写出来更好的 radio 和 checkbox  受控组件，但是如果你真的想要用 `ref` ，那么接下来的两部分会帮到你。\n</code></pre><h3 id=\"3、-Radio-标签集合\"><a href=\"#3、-Radio-标签集合\" class=\"headerlink\" title=\"3、 Radio 标签集合\"></a>3、 Radio 标签集合</h3><p>不像 text 和 number 这类 input 元素，radio 元素是成组出现的。每组中的元素都有相同的 <code>name</code> 属性，就像这样：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Cat</div><div class=\"line\">    &lt;input type=\"radio\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Dog</div><div class=\"line\">    &lt;input type=\"radio\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    Ferret</div><div class=\"line\">    &lt;input type=\"radio\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure>\n<p>在 “pet” radio 标签集合中有三个选项 —— “cat”、“dog” 和 “ferret”。</p>\n<p>由于我们关心的是整个集合的元素，所以给每个 radio 设置 <code>ref</code> 并不是一个好主意。遗憾的是，没有 DOM 节点是包含了 radio 集合的。</p>\n<p>可以通过下面的<strong>三步</strong>来检索出 radio 集合的值：<br>  1、在 <code>form</code> 标签上设置 ref （下面的第20行）。<br>  2、从 form 中取出这个 radio 集合。然后它应该是 <code>pet</code> 集合（下面的第9行）。</p>\n<ul>\n<li>此处返回一个节点列表和一个值。在这种情况下，这个节点列表包含三个 input 节点和被选中的值。</li>\n<li>需要注意的是这个节点列表是个类数组，它没有数组的方法。在下一部分中还有更多关于这个话题的内容。<br>3、使用 <code>.</code> 方法来获取这个集合的值（下面的第13行）。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// radio 标签集合有 value 属性</span></div><div class=\"line\">    <span class=\"comment\">// 查看打印出来的数据</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet, pet.value);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Cat</div><div class=\"line\">            &lt;input type=\"radio\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Dog</div><div class=\"line\">            &lt;input type=\"radio\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Ferret</div><div class=\"line\">            &lt;input type=\"radio\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>如果你正在用子组件写一个表单也是可行的。尽管组件中会有更多的逻辑，但是从 radio 集合中获取值的方法是不变的。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// radio 标签集合有 value 属性</span></div><div class=\"line\">    <span class=\"comment\">// 查看打印出来的数据</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet, pet.value);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;RadioSet</div><div class=\"line\">            setName=&#123;'pet'&#125;</div><div class=\"line\">            setOptions=&#123;['cat', 'dog', 'ferret']&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function RadioSet(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &#123;props.setOptions.map(option =&gt; &#123;</div><div class=\"line\">        return (</div><div class=\"line\">          &lt;label</div><div class=\"line\">            key=&#123;option&#125;</div><div class=\"line\">            style=&#123;&#123;textTransform: 'capitalize'&#125;&#125;&gt;</div><div class=\"line\">            &#123;option&#125;</div><div class=\"line\">            &lt;input</div><div class=\"line\">              type=\"radio\"</div><div class=\"line\">              value=&#123;option&#125;</div><div class=\"line\">              name=&#123;props.setName&#125; /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<h3 id=\"4、-Checkbox-标签集合\"><a href=\"#4、-Checkbox-标签集合\" class=\"headerlink\" title=\"4、 Checkbox 标签集合\"></a>4、 Checkbox 标签集合</h3><p>和 radio 标签集合不一样， Checkbox 标签集合可能有多个值。导致获取这些值会比获取 radio 标签集合的值难一些。</p>\n<p>可以通过下面的<strong>五步</strong>来检索出 checkbox 标签集合被选中的值：</p>\n<p>1、在 <code>form</code> 标签上设置 ref （下面的第27行）。<br>2、从 form 中取出这个checkbox 集合。然后它应该是 <code>pet</code> 集合（第9行）。</p>\n<ul>\n<li>此处返回一个节点列表和一个值</li>\n<li>需要注意的是这个节点列表是一个类数组，它没有数组的方法，然后我们就需要进行下面的这一步 …<br>3、把这个节点列表转换成一个数组，然后就可以使用数组的方法了（第 12 行的 <code>checkboxArray</code> ）。<br>4、使用  <code>Array.filter()</code> 获取选中的 checkbox  （第 15 行的 <code>checkedCheckboxes</code> ）。<br>5、使用  <code>Array.map()</code> 获取选中的 checkbox 的唯一的值（第 19 行的 <code>checkedCheckboxesValues</code> ）</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 把节点列表转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkboxArray = <span class=\"built_in\">Array</span>.prototype.slice.call(pet);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仅取出被选中的 checkbox</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxes = checkboxArray.filter(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.checked);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array:'</span>, checkedCheckboxes);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 .map() 方法从每个被选中的 checkbox 中把值取出来</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxesValues = checkedCheckboxes.map(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.value);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array values:'</span>, checkedCheckboxesValues);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Cat</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"cat\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Dog</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"dog\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;label&gt;</div><div class=\"line\">            Ferret</div><div class=\"line\">            &lt;input type=\"checkbox\" value=\"ferret\" name=\"pet\" /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<p>使用子组件写 checkbox 的方法和上一部分中写 radio 的方法是一样的。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefsForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">    e.preventDefault();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  从 form 中取出节点列表</span></div><div class=\"line\">    <span class=\"comment\">//  它是一个类数组，没有数组的方法</span></div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; pet &#125; = <span class=\"keyword\">this</span>.form;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 把节点列表转换成一个数组</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkboxArray = <span class=\"built_in\">Array</span>.prototype.slice.call(pet);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仅取出被选中的 checkbox</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxes = checkboxArray.filter(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.checked);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array:'</span>, checkedCheckboxes);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 .map() 方法从每个被选中的 checkbox 中把值取出来</span></div><div class=\"line\">    <span class=\"keyword\">const</span> checkedCheckboxesValues = checkedCheckboxes.map(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input.value);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'checked array values:'</span>, checkedCheckboxesValues);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form</div><div class=\"line\">          onSubmit=&#123;this.handleSubmit&#125;</div><div class=\"line\">          ref=&#123;form =&gt; this.form = form&#125;&gt;</div><div class=\"line\">          &lt;CheckboxSet</div><div class=\"line\">            setName=&#123;'pet'&#125;</div><div class=\"line\">            setOptions=&#123;['cat', 'dog', 'ferret']&#125; /&gt;</div><div class=\"line\">          &lt;input type=\"submit\" value=\"Submit\" /&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function CheckboxSet(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &#123;props.setOptions.map(option =&gt; &#123;</div><div class=\"line\">        return (</div><div class=\"line\">          &lt;label</div><div class=\"line\">            key=&#123;option&#125;</div><div class=\"line\">            style=&#123;&#123;textTransform: 'capitalize'&#125;&#125;&gt;</div><div class=\"line\">            &#123;option&#125;</div><div class=\"line\">            &lt;input</div><div class=\"line\">              type=\"checkbox\"</div><div class=\"line\">              value=&#123;option&#125;</div><div class=\"line\">              name=&#123;props.setName&#125; /&gt;</div><div class=\"line\">          &lt;/label&gt;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;)&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default RefsForm;</div></pre></td></tr></table></figure>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>如果你不需要：</p>\n<p>1、实时监视 form 元素的值（例如：为了基于用户的输入渲染之后的组件）<br>2、实时执行自定义验证方法</p>\n<p>那么使用 <code>ref</code> 方法获取 form 元素的值是一个很好的方法。</p>\n<p>大多数情况下，越过受控组件使用 <code>ref</code> 最主要的价值是会写更少的代码。 checkbox （ radio 其次）是一个特例。对于 checkbox ，使用 <code>ref</code> 省下的代码量是很少的，所以无法说是使用受控组件好还是 <code>ref</code> 好。</p>"},{"title":"Icomoon 的使用","date":"2016-06-13T16:00:00.000Z","_content":"IcoMoon是一个可以通过个性化设置来创建自定义图标（字体）的免费生成器。\n上面有600+的免费海量图标集，还可以按照自己的需求来定制，而且兼容IE6+以及各种手机设备。前端工程师们可以自己来生成图标，快速简单方便。\n\n<!--more-->\n\n1、打开主页面（https://icomoon.io/app/#/select）\n![](http://upload-images.jianshu.io/upload_images/1561693-d6dc72079363c081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2、![](http://upload-images.jianshu.io/upload_images/1561693-5052ef7c17abc6dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)新建一个图集\n\n3、添加图片\n a、可以把自己的.svg拖进来\n     ![](http://upload-images.jianshu.io/upload_images/1561693-f04992e0543e5076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nb、也可以点击[Add Icons From Library](https://icomoon.io/app/#/select/library) 来选择网站现有的图标\n![](http://upload-images.jianshu.io/upload_images/1561693-e057f43801b911c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4、生成字体\n\n          点击选中的图标之后，背景会变成白色。\n![](http://upload-images.jianshu.io/upload_images/1561693-989f03c89c26620a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果想要编辑选中的图标，就可以点击上方的Edit，然后再点击选中的图标，就可以进行编辑啦。\n![](http://upload-images.jianshu.io/upload_images/1561693-507ab0683ea530ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以对图标进行旋转操作和上下左右移动的操作\n![](http://upload-images.jianshu.io/upload_images/1561693-4b6e49ce333b3753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/1561693-8678d92d834a50e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编辑完成之后点击Generate Font F 生成字体\n\n![](http://upload-images.jianshu.io/upload_images/1561693-fffd797cb08a6b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里可以自己命名图标的名字\n![](http://upload-images.jianshu.io/upload_images/1561693-ce40d62e178a9e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后就可以点击Download来下载文件啦。\n![](http://upload-images.jianshu.io/upload_images/1561693-bfec463d588d0d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下载到本地之后解压文件，就会得到以下的文件：\n![](http://upload-images.jianshu.io/upload_images/1561693-379baa8735b8fcd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5、在网页上使用。\n\n     将fonts文件夹里面的全部文件和style.css里面的内容放到相应的项目中。\n![](http://upload-images.jianshu.io/upload_images/1561693-bdf2fe0f82c87e42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/1561693-0f45a99955f2aed4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n根据css生成的类名，应用在html文件里就可以添加字体啦。\n可以通过font-size来设置图标的大小，通过color来设置图标的颜色。\n\n<span class=\"icon-checkmark\"></span>\n\n.icon-checkmark{\n  font-size: 30px;\n  color:pink;\n}\n![](http://upload-images.jianshu.io/upload_images/1561693-b046e21fb730a389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当当当当~ 完成啦。总体来说还是很方便的，大小颜色任意设置。大家快用起来吧~","source":"_posts/Icomoon-的使用.md","raw":"---\ntitle: Icomoon 的使用\ndate: 2016-06-14 \ntags:\n---\nIcoMoon是一个可以通过个性化设置来创建自定义图标（字体）的免费生成器。\n上面有600+的免费海量图标集，还可以按照自己的需求来定制，而且兼容IE6+以及各种手机设备。前端工程师们可以自己来生成图标，快速简单方便。\n\n<!--more-->\n\n1、打开主页面（https://icomoon.io/app/#/select）\n![](http://upload-images.jianshu.io/upload_images/1561693-d6dc72079363c081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2、![](http://upload-images.jianshu.io/upload_images/1561693-5052ef7c17abc6dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)新建一个图集\n\n3、添加图片\n a、可以把自己的.svg拖进来\n     ![](http://upload-images.jianshu.io/upload_images/1561693-f04992e0543e5076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nb、也可以点击[Add Icons From Library](https://icomoon.io/app/#/select/library) 来选择网站现有的图标\n![](http://upload-images.jianshu.io/upload_images/1561693-e057f43801b911c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4、生成字体\n\n          点击选中的图标之后，背景会变成白色。\n![](http://upload-images.jianshu.io/upload_images/1561693-989f03c89c26620a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果想要编辑选中的图标，就可以点击上方的Edit，然后再点击选中的图标，就可以进行编辑啦。\n![](http://upload-images.jianshu.io/upload_images/1561693-507ab0683ea530ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以对图标进行旋转操作和上下左右移动的操作\n![](http://upload-images.jianshu.io/upload_images/1561693-4b6e49ce333b3753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/1561693-8678d92d834a50e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n编辑完成之后点击Generate Font F 生成字体\n\n![](http://upload-images.jianshu.io/upload_images/1561693-fffd797cb08a6b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里可以自己命名图标的名字\n![](http://upload-images.jianshu.io/upload_images/1561693-ce40d62e178a9e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后就可以点击Download来下载文件啦。\n![](http://upload-images.jianshu.io/upload_images/1561693-bfec463d588d0d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下载到本地之后解压文件，就会得到以下的文件：\n![](http://upload-images.jianshu.io/upload_images/1561693-379baa8735b8fcd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n5、在网页上使用。\n\n     将fonts文件夹里面的全部文件和style.css里面的内容放到相应的项目中。\n![](http://upload-images.jianshu.io/upload_images/1561693-bdf2fe0f82c87e42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/1561693-0f45a99955f2aed4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n根据css生成的类名，应用在html文件里就可以添加字体啦。\n可以通过font-size来设置图标的大小，通过color来设置图标的颜色。\n\n<span class=\"icon-checkmark\"></span>\n\n.icon-checkmark{\n  font-size: 30px;\n  color:pink;\n}\n![](http://upload-images.jianshu.io/upload_images/1561693-b046e21fb730a389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当当当当~ 完成啦。总体来说还是很方便的，大小颜色任意设置。大家快用起来吧~","slug":"Icomoon-的使用","published":1,"updated":"2017-07-15T13:28:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj55cid1x0004m4jcq7x5p9oq","content":"<p>IcoMoon是一个可以通过个性化设置来创建自定义图标（字体）的免费生成器。<br>上面有600+的免费海量图标集，还可以按照自己的需求来定制，而且兼容IE6+以及各种手机设备。前端工程师们可以自己来生成图标，快速简单方便。</p>\n<a id=\"more\"></a>\n<p>1、打开主页面（<a href=\"https://icomoon.io/app/#/select）\" target=\"_blank\" rel=\"external\">https://icomoon.io/app/#/select）</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d6dc72079363c081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>2、<img src=\"http://upload-images.jianshu.io/upload_images/1561693-5052ef7c17abc6dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">新建一个图集</p>\n<p>3、添加图片<br> a、可以把自己的.svg拖进来<br>     <img src=\"http://upload-images.jianshu.io/upload_images/1561693-f04992e0543e5076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>b、也可以点击<a href=\"https://icomoon.io/app/#/select/library\" target=\"_blank\" rel=\"external\">Add Icons From Library</a> 来选择网站现有的图标<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-e057f43801b911c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>4、生成字体</p>\n<pre><code>点击选中的图标之后，背景会变成白色。\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-989f03c89c26620a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果想要编辑选中的图标，就可以点击上方的Edit，然后再点击选中的图标，就可以进行编辑啦。<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-507ab0683ea530ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以对图标进行旋转操作和上下左右移动的操作<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-4b6e49ce333b3753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-8678d92d834a50e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>编辑完成之后点击Generate Font F 生成字体</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-fffd797cb08a6b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里可以自己命名图标的名字<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-ce40d62e178a9e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>然后就可以点击Download来下载文件啦。<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-bfec463d588d0d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>下载到本地之后解压文件，就会得到以下的文件：<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-379baa8735b8fcd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>5、在网页上使用。</p>\n<pre><code>将fonts文件夹里面的全部文件和style.css里面的内容放到相应的项目中。\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-bdf2fe0f82c87e42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-0f45a99955f2aed4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>根据css生成的类名，应用在html文件里就可以添加字体啦。<br>可以通过font-size来设置图标的大小，通过color来设置图标的颜色。</p>\n<p><span class=\"icon-checkmark\"></span></p>\n<p>.icon-checkmark{<br>  font-size: 30px;<br>  color:pink;<br>}<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-b046e21fb730a389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当当当当~ 完成啦。总体来说还是很方便的，大小颜色任意设置。大家快用起来吧~</p>\n","site":{"data":{}},"excerpt":"<p>IcoMoon是一个可以通过个性化设置来创建自定义图标（字体）的免费生成器。<br>上面有600+的免费海量图标集，还可以按照自己的需求来定制，而且兼容IE6+以及各种手机设备。前端工程师们可以自己来生成图标，快速简单方便。</p>","more":"<p>1、打开主页面（<a href=\"https://icomoon.io/app/#/select）\" target=\"_blank\" rel=\"external\">https://icomoon.io/app/#/select）</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-d6dc72079363c081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>2、<img src=\"http://upload-images.jianshu.io/upload_images/1561693-5052ef7c17abc6dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">新建一个图集</p>\n<p>3、添加图片<br> a、可以把自己的.svg拖进来<br>     <img src=\"http://upload-images.jianshu.io/upload_images/1561693-f04992e0543e5076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>b、也可以点击<a href=\"https://icomoon.io/app/#/select/library\" target=\"_blank\" rel=\"external\">Add Icons From Library</a> 来选择网站现有的图标<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-e057f43801b911c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>4、生成字体</p>\n<pre><code>点击选中的图标之后，背景会变成白色。\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-989f03c89c26620a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果想要编辑选中的图标，就可以点击上方的Edit，然后再点击选中的图标，就可以进行编辑啦。<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-507ab0683ea530ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以对图标进行旋转操作和上下左右移动的操作<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-4b6e49ce333b3753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-8678d92d834a50e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>编辑完成之后点击Generate Font F 生成字体</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-fffd797cb08a6b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这里可以自己命名图标的名字<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-ce40d62e178a9e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>然后就可以点击Download来下载文件啦。<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-bfec463d588d0d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>下载到本地之后解压文件，就会得到以下的文件：<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-379baa8735b8fcd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>5、在网页上使用。</p>\n<pre><code>将fonts文件夹里面的全部文件和style.css里面的内容放到相应的项目中。\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/1561693-bdf2fe0f82c87e42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-0f45a99955f2aed4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>根据css生成的类名，应用在html文件里就可以添加字体啦。<br>可以通过font-size来设置图标的大小，通过color来设置图标的颜色。</p>\n<p><span class=\"icon-checkmark\"></span></p>\n<p>.icon-checkmark{<br>  font-size: 30px;<br>  color:pink;<br>}<br><img src=\"http://upload-images.jianshu.io/upload_images/1561693-b046e21fb730a389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当当当当~ 完成啦。总体来说还是很方便的，大小颜色任意设置。大家快用起来吧~</p>"},{"title":"Angular之路--带你来搭建Webpack 2 + Angular 4项目","date":"2017-04-11T16:00:00.000Z","_content":"上个月`Angular`发布了`4.0.0`版本，少年们，赶快学起来吧，这篇文章带领大家搭建一个简单的`Angular`应用，会尽量详细的把每个点都解释到。\n   \n首先我选择了用`webpack2`来作为打包工具，选择`wenpack2`的理由不言而喻。这里假设你已经了解`webpack2`的一些原理，下面开始来学习吧～\n\n详细代码可以看我的[git项目](https://github.com/yanyixin/angular2-todolist)\n\n<!--more-->\n\n## 一、配置 webpack\n\n首先新建一个项目文件夹\n\n``` JavaScript\nmkdir angular-dream\ncd angular-dream\n```\n在控制台中输入命令 `npm init` ，创建 `package.json` 文件。如图：\n\n![创建package.json文件](https://dn-mhke0kuv.qbox.me/9b59abb62c90ea6f70e0.png)\n在控制台中可以一路回车。当然，这里我命名了项目的名称为 `angular-dream` ，还有一些其他的信息。\n\n创建好之后用编辑器（我使用的是webstorm）打开这个项目。\n\n### package.json 文件的配置\n关于 `package.json` 文件里面的一些参数的含义，可以参考[阮一峰老师写的这篇文章](http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc1) 。\n``` Javascript\n{\n  \"name\": \"angular2-dream\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello Angular2\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config config/webpack.dev.js --progress\",\n    \"test\": \"karma start\",\n    \"build\": \"webpack --config config/webpack.dev.js --progress --profile --bail\",\n    \"webpack\": \"webpack\",\n    \"rimraf\": \"rimraf\"\n  },\n  \"keywords\": [\n    \"angular2\",\n    \"webpack\"\n  ],\n  \"author\": \"yanmeng@hujiang.com\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@angular/animations\": \"~4.0.1\",\n    \"@angular/common\": \"~4.0.0\",\n    \"@angular/compiler\": \"~4.0.0\",\n    \"@angular/core\": \"^4.0.1\",\n    \"@angular/forms\": \"~4.0.1\",\n    \"@angular/http\": \"~4.0.1\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"5.2.0\",\n    \"zone.js\": \"^0.8.5\"\n  },\n  \"devDependencies\": {\n    \"reflect-metadata\": \"^0.1.10\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"@angular/compiler-cli\": \"~4.0.1\",\n    \"@angular/platform-browser\": \"~4.0.1\",\n    \"@angular/platform-browser-dynamic\": \"~4.0.1\",\n    \"@angular/platform-server\": \"~4.0.1\",\n    \"@angular/router\": \"~4.0.1\",\n    \"@angularclass/hmr\": \"^1.2.2\",\n    \"@angularclass/hmr-loader\": \"^3.0.2\",\n    \"@types/jasmine\": \"^2.5.43\",\n    \"@types/node\": \"^6.0.45\",\n    \"angular2-template-loader\": \"^0.6.0\",\n    \"awesome-typescript-loader\": \"^3.0.4\",\n    \"bootstrap\": \"^4.0.0-alpha.6\",\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.5\",\n    \"file-loader\": \"^0.9.0\",\n    \"font-awesome\": \"^4.7.0\",\n    \"html-loader\": \"^0.4.3\",\n    \"postcss-loader\": \"^1.3.1\",\n    \"raw-loader\": \"^0.5.1\",\n    \"style-loader\": \"^0.13.1\",\n    \"to-string-loader\": \"^1.1.5\",\n    \"ts-helpers\": \"^1.1.2\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"2.2.0\",\n    \"webpack-dev-server\": \"2.2.0-rc.0\",\n    \"webpack-merge\": \"^2.4.0\",\n    \"typescript\": \"^2.2.2\"\n  }\n}\n\n```\n\n* `@angular/compiler` - Angular的模板编译器。 它会理解模板，并且把模板转化成代码，以供应用程序运行和渲染。 开发人员通常不会直接跟这个编译器打交道，而是通过platform-browser-dynamic或离线模板编译器间接使用它。\n* `@angular/platform-browser` - 与DOM和浏览器相关的每样东西，特别是帮助往DOM中渲染的那部分。 这个包还包含bootstrapStatic方法，用来引导那些在产品构建时需要离线预编译模板的应用程序\n* `@angular/platform-browser-dynamic` - 为应用程序提供一些提供商和bootstrap方法，以便在客户端编译模板。不要用于离线编译。 我们使用这个包在开发期间引导应用，以及引导plunker中的范例。\n* `core-js` - 为全局上下文(window)打的补丁，提供了ES2015(ES6)的很多基础特性。 我们也可以把它换成提供了相同内核API的其它填充库。 一旦所有的“主流浏览器”都实现了这些API，这个依赖就可以去掉了。\n* `reflect-metadata` - 一个由Angular和TypeScript编译器共享的依赖包。\n\n### tsconfig.json 文件的配置\n在项目的根目录下创建 `tsconfig.json` 文件。\n\n浏览器不能直接执行 `TypeScript` ，需要用编译器转译成JavaScript，而且编译器需要进行一些配置。 `tsconfig.json` 的配置就是指导编译器如何生成JavaScript文件。\n\n``` JavaScript\n{\n  \"compilerOptions\": {\n    \"declaration\": false,\n    \"module\": \"commonjs\", // 组织代码的方式\n    \"target\": \"es5\", // 编译目标平台\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true, // 把ts文件变异成js文件时，是否生成对应的SourceMap文件\n    \"emitDecoratorMetadata\": true, // 让TypeScript支持为带有装饰器的声明生成元数据\n    \"experimentalDecorators\": true, // 是否启用实验性装饰器特性\n    \"noImplicitAny\": true,\n    \"lib\": [\"dom\", \"es6\"],\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ],\n  \"awesomeTypescriptLoaderOptions\": {\n    \"forkChecker\": true,\n    \"useWebpackText\": true\n  },\n  \"compileOnSave\": false,\n  \"buildOnSave\": false\n}\n\n```\n\n当 `noImplicitAny` 标志是 `true` 并且TypeScript编译器无法推断出类型时，它仍然会生成JavaScript文件。 但是它也会报告一个错误。 很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。\n\n### 创建 webpack.config.js文件\n在根目录下创建 `webpack.config.js`文件\n\n``` JavaScript\nmodule.exports = require('./config/webpack.dev.js');\n```\n\n现在在控制台中执行 `npm install` 命令，安装项目的依赖。\n\n## 二、Polyfills\n配置好上述的几个文件之后呢，我们在项目中的根目录下创建一个 `src` 文件夹。\n\n在 `src` 文件夹的下面新建一个 `polyfills.ts` 文件。\n\n`polyfills.ts` 文件里引入了运行Angular应用时所需的一些标准js。\n``` JavaScript\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'core-js/es6/weak-map';\nimport 'core-js/es6/weak-set';\nimport 'core-js/es6/typed';\n\n/** Evergreen browsers require these. **/\nimport 'core-js/es6/reflect';\n\nimport 'core-js/es7/reflect';\n\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\nimport 'zone.js/dist/zone';\n\nimport 'ts-helpers';\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n```\n## 三、Vendor\n\n在 `src` 文件夹的下面新建一个 `vendor.ts` 文件。\n\n`vendor.ts` 文件里面引入了一些第三方的依赖。\n``` JavaScript\n// Angular\n//包含所有提供商依赖\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/compiler';\nimport '@angular/core';  // 存放核心代码，如变化监测机制，依赖注入机制，渲染，装饰器等。\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs/Observable';\nimport 'rxjs/Subscription';\nimport 'rxjs/Subject';\nimport 'rxjs/BehaviorSubject';\n\n// Bootsctrap\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\n```\n## 四、Main\n在 `src` 文件夹的下面新建一个 `main.ts` 文件。\n\n在 `main.ts` 文件中，我们指定了项目的根模块为 `AppModule`\n\n``` Javascript\nimport {AppModule} from './app/app.module';\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n// platformBrowserDynamic().bootstrapModule()方法来编译启用AppModule模块\n// 根据当前的运行环境，如操作系统、浏览器，来初始化一个运行环境，然后从这个环境里面运行AppModule。\n\n```\n\n## 五、config\n在根目录下创建一个 `config` 文件夹\n\n### helpers.js\n在 `config` 文件夹下面创建一个 `helpers.js` 文件。\n\n在这里请注意入口 `polyfills`,`vendor` 和 `app` 的先后顺序。\n``` JavaScript\nvar path = require('path');\nvar _root = path.resolve(__dirname, '..');\nfunction root(args) {\n  args = Array.prototype.slice.call(arguments, 0);\n  return path.join.apply(path, [_root].concat(args));\n}\nexports.root = root;\n```\n### webpack.common.js\n在 `config` 文件夹下面创建一个 `webpack.common.js` 文件。\n``` Javascript\nconst helpers = require('./helpers');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts', // 运行Angular时所需的一些标准js\n    'vendor': './src/vendor.ts', // Angular、Lodash、bootstrap.css......\n    'app': './src/main.ts' // 应用代码\n  },\n  resolve: { // 解析模块路径时的配置\n    extensions: ['.ts', '.js'] // 制定模块的后缀，在引入模块时就会自动补全\n  },\n  module: {\n    rules: [ // 告诉webpack每一类文件需要使用什么加载器来处理\n      {\n        test   : /\\.ts$/,\n        loaders: ['awesome-typescript-loader', 'angular2-template-loader']\n        //awesome-typescript-loader - 一个用于把TypeScript代码转译成ES5的加载器，它会由tsconfig.json文件提供指导\n        //angular2-template-loader - 用于加载Angular组件的模板和样式\n      }, {\n        test: /\\.json$/,\n        use : 'json-loader'\n      }, {\n        test: /\\.styl$/,\n        loader: 'css-loader!stylus-loader'\n      }, {\n        test   : /\\.css$/,\n        loaders: ['to-string-loader', 'css-loader']\n      }, {\n        test: /\\.html$/,\n        use: 'raw-loader',\n        exclude: [helpers.root('src/index.html')]\n        //html - 为组件模板准备的加载器\n      }, {\n        test:/\\.(jpg|png|gif)$/,\n        use:\"file-loader\"\n      }, {\n        test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        use : \"url-loader?limit=10000&minetype=application/font-woff\"\n      }, {\n        test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        use : \"file-loader\"\n      }\n    ]\n  },\n  plugins: [\n    //热替换\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['vendor', 'polyfills']\n      //多个html共用一个js文件，提取公共代码\n    }),\n    \n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n      // 自动向目标.html文件注入script和link标签\n    })\n  ]\n};\n```\n\n### webpack.dev.js\n在 `config` 文件夹下面创建一个 `webpack.dev.js` 文件。\n``` JavaScript\nvar webpackMerge = require('webpack-merge');\nvar commonConfig = require('./webpack.common.js');\nconst helpers = require('./helpers');\n\nmodule.exports = webpackMerge(commonConfig, {\n  output   : {\n    path      : helpers.root('dist'),\n    publicPath: '/',\n    filename  : '[name].js'\n  },\n  devServer: {\n    port              : 8080,\n    historyApiFallback: true\n  }\n});\n```\n至此，现在的目录结构就如下图所示：\n\n![](https://dn-mhke0kuv.qbox.me/01070446b15d18534a3d)\n因为我们还没有创建 `AppModule` ，所以 `main.ts` 文件会被标红。\n\n## 六、根模块 AppModule\n基本的配置已经完成啦，现在我们来创建根模块～\n\n在 `src` 文件下面新建一个 `app` 文件夹，\n### 创建 app.component.ts\n在`app` 文件夹下面新建 `app.component.ts` 文件\n\n``` JavaScript\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector   : 'root-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  constructor() {}\n}\n```\n### 创建 app.component.html\n在 `app` 文件夹下面新建 `app.component.html` 文件\n``` HTML\n<h1 class=\"title\">Hello Angular2</h1>\n\n<router-outlet></router-outlet>\n```\n### 创建 app.routes.ts\n这里我们用一下路由来完成页面之间的跳转\n``` Javascript\nimport { Routes } from '@angular/router';\nimport { AppComponent } from \"./app.component\";\nexport const routes: Routes = [ // Routes类型的数组\n  {\n    path      : 'index',\n    component : AppComponent\n  },{\n    path      : '',\n    redirectTo: 'index',\n    pathMatch : 'full'\n  }\n];\n\n```\n### 创建 app.module.ts\n在 `app` 文件夹下面新建 `app.module.ts` 文件\n``` JavaScript\nimport { AppComponent } from './app.component';\nimport { routes } from './app.routes';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { NgModule } from \"@angular/core\";\n//@NgModule装饰器用来为模块定义元数据\n@NgModule({ // @NgModule 用来定义模块用的装饰器\n  declarations: [AppComponent], // 导入模块所依赖的组件、指令等,用于指定这个模块的视图类\n  imports: [\n    BrowserModule, //包含了commonModule和applicationModule模块,封装在浏览器平台运行时的一些工具库\n    FormsModule,  // 表单相关的组件指令等，包含了[(ngModel)]\n    RouterModule.forRoot(routes,{useHash: false}), // RouterModule.forRoot()方法来创建根路由模块\n  ], // 导入当前模块所需要的其他模块\n  bootstrap: [AppComponent], // 标记出引导组件\n  //把这个AppComponent标记为引导 (bootstrap) 组件。当Angular引导应用时，它会在DOM中渲\n  //染AppComponent，并把结果放进index.html的元素内部。\n})\nexport class AppModule { }\n```\n\n## 六、宿主页面\n\n在 `src` 文件夹下面新建 `index.html` 文件\n\n``` HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Angular2 Hello Word</title>\n    <base href=\"/\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n    <root-app>Loading...</root-app>\n</body>\n</html>\n```\n\n\n好啦，此时的项目目录结构就是下图所示：\n![](https://dn-mhke0kuv.qbox.me/3ec563d462c569bfe32c)\n\n接下来运行 `npm start` 开始你的 `Angular` 之旅吧～\n\n参考：\n* [Angular官方网站](https://angular.io)","source":"_posts/Angular之路-带你来搭建Webpack-2-Angular-4项目.md","raw":"---\ntitle: Angular之路--带你来搭建Webpack 2 + Angular 4项目\ndate: 2017-04-12\ntags:\n---\n上个月`Angular`发布了`4.0.0`版本，少年们，赶快学起来吧，这篇文章带领大家搭建一个简单的`Angular`应用，会尽量详细的把每个点都解释到。\n   \n首先我选择了用`webpack2`来作为打包工具，选择`wenpack2`的理由不言而喻。这里假设你已经了解`webpack2`的一些原理，下面开始来学习吧～\n\n详细代码可以看我的[git项目](https://github.com/yanyixin/angular2-todolist)\n\n<!--more-->\n\n## 一、配置 webpack\n\n首先新建一个项目文件夹\n\n``` JavaScript\nmkdir angular-dream\ncd angular-dream\n```\n在控制台中输入命令 `npm init` ，创建 `package.json` 文件。如图：\n\n![创建package.json文件](https://dn-mhke0kuv.qbox.me/9b59abb62c90ea6f70e0.png)\n在控制台中可以一路回车。当然，这里我命名了项目的名称为 `angular-dream` ，还有一些其他的信息。\n\n创建好之后用编辑器（我使用的是webstorm）打开这个项目。\n\n### package.json 文件的配置\n关于 `package.json` 文件里面的一些参数的含义，可以参考[阮一峰老师写的这篇文章](http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc1) 。\n``` Javascript\n{\n  \"name\": \"angular2-dream\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello Angular2\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config config/webpack.dev.js --progress\",\n    \"test\": \"karma start\",\n    \"build\": \"webpack --config config/webpack.dev.js --progress --profile --bail\",\n    \"webpack\": \"webpack\",\n    \"rimraf\": \"rimraf\"\n  },\n  \"keywords\": [\n    \"angular2\",\n    \"webpack\"\n  ],\n  \"author\": \"yanmeng@hujiang.com\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@angular/animations\": \"~4.0.1\",\n    \"@angular/common\": \"~4.0.0\",\n    \"@angular/compiler\": \"~4.0.0\",\n    \"@angular/core\": \"^4.0.1\",\n    \"@angular/forms\": \"~4.0.1\",\n    \"@angular/http\": \"~4.0.1\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"5.2.0\",\n    \"zone.js\": \"^0.8.5\"\n  },\n  \"devDependencies\": {\n    \"reflect-metadata\": \"^0.1.10\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"@angular/compiler-cli\": \"~4.0.1\",\n    \"@angular/platform-browser\": \"~4.0.1\",\n    \"@angular/platform-browser-dynamic\": \"~4.0.1\",\n    \"@angular/platform-server\": \"~4.0.1\",\n    \"@angular/router\": \"~4.0.1\",\n    \"@angularclass/hmr\": \"^1.2.2\",\n    \"@angularclass/hmr-loader\": \"^3.0.2\",\n    \"@types/jasmine\": \"^2.5.43\",\n    \"@types/node\": \"^6.0.45\",\n    \"angular2-template-loader\": \"^0.6.0\",\n    \"awesome-typescript-loader\": \"^3.0.4\",\n    \"bootstrap\": \"^4.0.0-alpha.6\",\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.5\",\n    \"file-loader\": \"^0.9.0\",\n    \"font-awesome\": \"^4.7.0\",\n    \"html-loader\": \"^0.4.3\",\n    \"postcss-loader\": \"^1.3.1\",\n    \"raw-loader\": \"^0.5.1\",\n    \"style-loader\": \"^0.13.1\",\n    \"to-string-loader\": \"^1.1.5\",\n    \"ts-helpers\": \"^1.1.2\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"2.2.0\",\n    \"webpack-dev-server\": \"2.2.0-rc.0\",\n    \"webpack-merge\": \"^2.4.0\",\n    \"typescript\": \"^2.2.2\"\n  }\n}\n\n```\n\n* `@angular/compiler` - Angular的模板编译器。 它会理解模板，并且把模板转化成代码，以供应用程序运行和渲染。 开发人员通常不会直接跟这个编译器打交道，而是通过platform-browser-dynamic或离线模板编译器间接使用它。\n* `@angular/platform-browser` - 与DOM和浏览器相关的每样东西，特别是帮助往DOM中渲染的那部分。 这个包还包含bootstrapStatic方法，用来引导那些在产品构建时需要离线预编译模板的应用程序\n* `@angular/platform-browser-dynamic` - 为应用程序提供一些提供商和bootstrap方法，以便在客户端编译模板。不要用于离线编译。 我们使用这个包在开发期间引导应用，以及引导plunker中的范例。\n* `core-js` - 为全局上下文(window)打的补丁，提供了ES2015(ES6)的很多基础特性。 我们也可以把它换成提供了相同内核API的其它填充库。 一旦所有的“主流浏览器”都实现了这些API，这个依赖就可以去掉了。\n* `reflect-metadata` - 一个由Angular和TypeScript编译器共享的依赖包。\n\n### tsconfig.json 文件的配置\n在项目的根目录下创建 `tsconfig.json` 文件。\n\n浏览器不能直接执行 `TypeScript` ，需要用编译器转译成JavaScript，而且编译器需要进行一些配置。 `tsconfig.json` 的配置就是指导编译器如何生成JavaScript文件。\n\n``` JavaScript\n{\n  \"compilerOptions\": {\n    \"declaration\": false,\n    \"module\": \"commonjs\", // 组织代码的方式\n    \"target\": \"es5\", // 编译目标平台\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true, // 把ts文件变异成js文件时，是否生成对应的SourceMap文件\n    \"emitDecoratorMetadata\": true, // 让TypeScript支持为带有装饰器的声明生成元数据\n    \"experimentalDecorators\": true, // 是否启用实验性装饰器特性\n    \"noImplicitAny\": true,\n    \"lib\": [\"dom\", \"es6\"],\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ],\n  \"awesomeTypescriptLoaderOptions\": {\n    \"forkChecker\": true,\n    \"useWebpackText\": true\n  },\n  \"compileOnSave\": false,\n  \"buildOnSave\": false\n}\n\n```\n\n当 `noImplicitAny` 标志是 `true` 并且TypeScript编译器无法推断出类型时，它仍然会生成JavaScript文件。 但是它也会报告一个错误。 很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。\n\n### 创建 webpack.config.js文件\n在根目录下创建 `webpack.config.js`文件\n\n``` JavaScript\nmodule.exports = require('./config/webpack.dev.js');\n```\n\n现在在控制台中执行 `npm install` 命令，安装项目的依赖。\n\n## 二、Polyfills\n配置好上述的几个文件之后呢，我们在项目中的根目录下创建一个 `src` 文件夹。\n\n在 `src` 文件夹的下面新建一个 `polyfills.ts` 文件。\n\n`polyfills.ts` 文件里引入了运行Angular应用时所需的一些标准js。\n``` JavaScript\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'core-js/es6/weak-map';\nimport 'core-js/es6/weak-set';\nimport 'core-js/es6/typed';\n\n/** Evergreen browsers require these. **/\nimport 'core-js/es6/reflect';\n\nimport 'core-js/es7/reflect';\n\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\nimport 'zone.js/dist/zone';\n\nimport 'ts-helpers';\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n```\n## 三、Vendor\n\n在 `src` 文件夹的下面新建一个 `vendor.ts` 文件。\n\n`vendor.ts` 文件里面引入了一些第三方的依赖。\n``` JavaScript\n// Angular\n//包含所有提供商依赖\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/compiler';\nimport '@angular/core';  // 存放核心代码，如变化监测机制，依赖注入机制，渲染，装饰器等。\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs/Observable';\nimport 'rxjs/Subscription';\nimport 'rxjs/Subject';\nimport 'rxjs/BehaviorSubject';\n\n// Bootsctrap\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\n```\n## 四、Main\n在 `src` 文件夹的下面新建一个 `main.ts` 文件。\n\n在 `main.ts` 文件中，我们指定了项目的根模块为 `AppModule`\n\n``` Javascript\nimport {AppModule} from './app/app.module';\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n// platformBrowserDynamic().bootstrapModule()方法来编译启用AppModule模块\n// 根据当前的运行环境，如操作系统、浏览器，来初始化一个运行环境，然后从这个环境里面运行AppModule。\n\n```\n\n## 五、config\n在根目录下创建一个 `config` 文件夹\n\n### helpers.js\n在 `config` 文件夹下面创建一个 `helpers.js` 文件。\n\n在这里请注意入口 `polyfills`,`vendor` 和 `app` 的先后顺序。\n``` JavaScript\nvar path = require('path');\nvar _root = path.resolve(__dirname, '..');\nfunction root(args) {\n  args = Array.prototype.slice.call(arguments, 0);\n  return path.join.apply(path, [_root].concat(args));\n}\nexports.root = root;\n```\n### webpack.common.js\n在 `config` 文件夹下面创建一个 `webpack.common.js` 文件。\n``` Javascript\nconst helpers = require('./helpers');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts', // 运行Angular时所需的一些标准js\n    'vendor': './src/vendor.ts', // Angular、Lodash、bootstrap.css......\n    'app': './src/main.ts' // 应用代码\n  },\n  resolve: { // 解析模块路径时的配置\n    extensions: ['.ts', '.js'] // 制定模块的后缀，在引入模块时就会自动补全\n  },\n  module: {\n    rules: [ // 告诉webpack每一类文件需要使用什么加载器来处理\n      {\n        test   : /\\.ts$/,\n        loaders: ['awesome-typescript-loader', 'angular2-template-loader']\n        //awesome-typescript-loader - 一个用于把TypeScript代码转译成ES5的加载器，它会由tsconfig.json文件提供指导\n        //angular2-template-loader - 用于加载Angular组件的模板和样式\n      }, {\n        test: /\\.json$/,\n        use : 'json-loader'\n      }, {\n        test: /\\.styl$/,\n        loader: 'css-loader!stylus-loader'\n      }, {\n        test   : /\\.css$/,\n        loaders: ['to-string-loader', 'css-loader']\n      }, {\n        test: /\\.html$/,\n        use: 'raw-loader',\n        exclude: [helpers.root('src/index.html')]\n        //html - 为组件模板准备的加载器\n      }, {\n        test:/\\.(jpg|png|gif)$/,\n        use:\"file-loader\"\n      }, {\n        test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        use : \"url-loader?limit=10000&minetype=application/font-woff\"\n      }, {\n        test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        use : \"file-loader\"\n      }\n    ]\n  },\n  plugins: [\n    //热替换\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['vendor', 'polyfills']\n      //多个html共用一个js文件，提取公共代码\n    }),\n    \n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n      // 自动向目标.html文件注入script和link标签\n    })\n  ]\n};\n```\n\n### webpack.dev.js\n在 `config` 文件夹下面创建一个 `webpack.dev.js` 文件。\n``` JavaScript\nvar webpackMerge = require('webpack-merge');\nvar commonConfig = require('./webpack.common.js');\nconst helpers = require('./helpers');\n\nmodule.exports = webpackMerge(commonConfig, {\n  output   : {\n    path      : helpers.root('dist'),\n    publicPath: '/',\n    filename  : '[name].js'\n  },\n  devServer: {\n    port              : 8080,\n    historyApiFallback: true\n  }\n});\n```\n至此，现在的目录结构就如下图所示：\n\n![](https://dn-mhke0kuv.qbox.me/01070446b15d18534a3d)\n因为我们还没有创建 `AppModule` ，所以 `main.ts` 文件会被标红。\n\n## 六、根模块 AppModule\n基本的配置已经完成啦，现在我们来创建根模块～\n\n在 `src` 文件下面新建一个 `app` 文件夹，\n### 创建 app.component.ts\n在`app` 文件夹下面新建 `app.component.ts` 文件\n\n``` JavaScript\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector   : 'root-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  constructor() {}\n}\n```\n### 创建 app.component.html\n在 `app` 文件夹下面新建 `app.component.html` 文件\n``` HTML\n<h1 class=\"title\">Hello Angular2</h1>\n\n<router-outlet></router-outlet>\n```\n### 创建 app.routes.ts\n这里我们用一下路由来完成页面之间的跳转\n``` Javascript\nimport { Routes } from '@angular/router';\nimport { AppComponent } from \"./app.component\";\nexport const routes: Routes = [ // Routes类型的数组\n  {\n    path      : 'index',\n    component : AppComponent\n  },{\n    path      : '',\n    redirectTo: 'index',\n    pathMatch : 'full'\n  }\n];\n\n```\n### 创建 app.module.ts\n在 `app` 文件夹下面新建 `app.module.ts` 文件\n``` JavaScript\nimport { AppComponent } from './app.component';\nimport { routes } from './app.routes';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { NgModule } from \"@angular/core\";\n//@NgModule装饰器用来为模块定义元数据\n@NgModule({ // @NgModule 用来定义模块用的装饰器\n  declarations: [AppComponent], // 导入模块所依赖的组件、指令等,用于指定这个模块的视图类\n  imports: [\n    BrowserModule, //包含了commonModule和applicationModule模块,封装在浏览器平台运行时的一些工具库\n    FormsModule,  // 表单相关的组件指令等，包含了[(ngModel)]\n    RouterModule.forRoot(routes,{useHash: false}), // RouterModule.forRoot()方法来创建根路由模块\n  ], // 导入当前模块所需要的其他模块\n  bootstrap: [AppComponent], // 标记出引导组件\n  //把这个AppComponent标记为引导 (bootstrap) 组件。当Angular引导应用时，它会在DOM中渲\n  //染AppComponent，并把结果放进index.html的元素内部。\n})\nexport class AppModule { }\n```\n\n## 六、宿主页面\n\n在 `src` 文件夹下面新建 `index.html` 文件\n\n``` HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Angular2 Hello Word</title>\n    <base href=\"/\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n    <root-app>Loading...</root-app>\n</body>\n</html>\n```\n\n\n好啦，此时的项目目录结构就是下图所示：\n![](https://dn-mhke0kuv.qbox.me/3ec563d462c569bfe32c)\n\n接下来运行 `npm start` 开始你的 `Angular` 之旅吧～\n\n参考：\n* [Angular官方网站](https://angular.io)","slug":"Angular之路-带你来搭建Webpack-2-Angular-4项目","published":1,"updated":"2017-07-15T13:28:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj55cid200005m4jc9g81pg1q","content":"<p>上个月<code>Angular</code>发布了<code>4.0.0</code>版本，少年们，赶快学起来吧，这篇文章带领大家搭建一个简单的<code>Angular</code>应用，会尽量详细的把每个点都解释到。</p>\n<p>首先我选择了用<code>webpack2</code>来作为打包工具，选择<code>wenpack2</code>的理由不言而喻。这里假设你已经了解<code>webpack2</code>的一些原理，下面开始来学习吧～</p>\n<p>详细代码可以看我的<a href=\"https://github.com/yanyixin/angular2-todolist\" target=\"_blank\" rel=\"external\">git项目</a></p>\n<a id=\"more\"></a>\n<h2 id=\"一、配置-webpack\"><a href=\"#一、配置-webpack\" class=\"headerlink\" title=\"一、配置 webpack\"></a>一、配置 webpack</h2><p>首先新建一个项目文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir angular-dream</div><div class=\"line\">cd angular-dream</div></pre></td></tr></table></figure>\n<p>在控制台中输入命令 <code>npm init</code> ，创建 <code>package.json</code> 文件。如图：</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/9b59abb62c90ea6f70e0.png\" alt=\"创建package.json文件\"><br>在控制台中可以一路回车。当然，这里我命名了项目的名称为 <code>angular-dream</code> ，还有一些其他的信息。</p>\n<p>创建好之后用编辑器（我使用的是webstorm）打开这个项目。</p>\n<h3 id=\"package-json-文件的配置\"><a href=\"#package-json-文件的配置\" class=\"headerlink\" title=\"package.json 文件的配置\"></a>package.json 文件的配置</h3><p>关于 <code>package.json</code> 文件里面的一些参数的含义，可以参考<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc1\" target=\"_blank\" rel=\"external\">阮一峰老师写的这篇文章</a> 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"angular2-dream\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Hello Angular2\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --config config/webpack.dev.js --progress\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config config/webpack.dev.js --progress --profile --bail\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span>,</div><div class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"rimraf\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"angular2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"yanmeng@hujiang.com\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"@angular/animations\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/common\"</span>: <span class=\"string\">\"~4.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/compiler\"</span>: <span class=\"string\">\"~4.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/core\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/forms\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/http\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"core-js\"</span>: <span class=\"string\">\"^2.4.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"rxjs\"</span>: <span class=\"string\">\"5.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"zone.js\"</span>: <span class=\"string\">\"^0.8.5\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"reflect-metadata\"</span>: <span class=\"string\">\"^0.1.10\"</span>,</div><div class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.28.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/compiler-cli\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-browser\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-browser-dynamic\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-server\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/router\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angularclass/hmr\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angularclass/hmr-loader\"</span>: <span class=\"string\">\"^3.0.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@types/jasmine\"</span>: <span class=\"string\">\"^2.5.43\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@types/node\"</span>: <span class=\"string\">\"^6.0.45\"</span>,</div><div class=\"line\">    <span class=\"string\">\"angular2-template-loader\"</span>: <span class=\"string\">\"^0.6.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"awesome-typescript-loader\"</span>: <span class=\"string\">\"^3.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"bootstrap\"</span>: <span class=\"string\">\"^4.0.0-alpha.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"bootstrap-sass\"</span>: <span class=\"string\">\"^3.3.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.26.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"2.0.0-beta.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^0.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"font-awesome\"</span>: <span class=\"string\">\"^4.7.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"html-loader\"</span>: <span class=\"string\">\"^0.4.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"postcss-loader\"</span>: <span class=\"string\">\"^1.3.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"raw-loader\"</span>: <span class=\"string\">\"^0.5.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"to-string-loader\"</span>: <span class=\"string\">\"^1.1.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"ts-helpers\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"2.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"2.2.0-rc.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"typescript\"</span>: <span class=\"string\">\"^2.2.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>@angular/compiler</code> - Angular的模板编译器。 它会理解模板，并且把模板转化成代码，以供应用程序运行和渲染。 开发人员通常不会直接跟这个编译器打交道，而是通过platform-browser-dynamic或离线模板编译器间接使用它。</li>\n<li><code>@angular/platform-browser</code> - 与DOM和浏览器相关的每样东西，特别是帮助往DOM中渲染的那部分。 这个包还包含bootstrapStatic方法，用来引导那些在产品构建时需要离线预编译模板的应用程序</li>\n<li><code>@angular/platform-browser-dynamic</code> - 为应用程序提供一些提供商和bootstrap方法，以便在客户端编译模板。不要用于离线编译。 我们使用这个包在开发期间引导应用，以及引导plunker中的范例。</li>\n<li><code>core-js</code> - 为全局上下文(window)打的补丁，提供了ES2015(ES6)的很多基础特性。 我们也可以把它换成提供了相同内核API的其它填充库。 一旦所有的“主流浏览器”都实现了这些API，这个依赖就可以去掉了。</li>\n<li><code>reflect-metadata</code> - 一个由Angular和TypeScript编译器共享的依赖包。</li>\n</ul>\n<h3 id=\"tsconfig-json-文件的配置\"><a href=\"#tsconfig-json-文件的配置\" class=\"headerlink\" title=\"tsconfig.json 文件的配置\"></a>tsconfig.json 文件的配置</h3><p>在项目的根目录下创建 <code>tsconfig.json</code> 文件。</p>\n<p>浏览器不能直接执行 <code>TypeScript</code> ，需要用编译器转译成JavaScript，而且编译器需要进行一些配置。 <code>tsconfig.json</code> 的配置就是指导编译器如何生成JavaScript文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>, <span class=\"comment\">// 组织代码的方式</span></div><div class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>, <span class=\"comment\">// 编译目标平台</span></div><div class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 把ts文件变异成js文件时，是否生成对应的SourceMap文件</span></div><div class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 让TypeScript支持为带有装饰器的声明生成元数据</span></div><div class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否启用实验性装饰器特性</span></div><div class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"dom\"</span>, <span class=\"string\">\"es6\"</span>],</div><div class=\"line\">    <span class=\"string\">\"suppressImplicitAnyIndexErrors\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</div><div class=\"line\">    <span class=\"string\">\"dist\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"awesomeTypescriptLoaderOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"forkChecker\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"useWebpackText\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"compileOnSave\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"string\">\"buildOnSave\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当 <code>noImplicitAny</code> 标志是 <code>true</code> 并且TypeScript编译器无法推断出类型时，它仍然会生成JavaScript文件。 但是它也会报告一个错误。 很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。</p>\n<h3 id=\"创建-webpack-config-js文件\"><a href=\"#创建-webpack-config-js文件\" class=\"headerlink\" title=\"创建 webpack.config.js文件\"></a>创建 webpack.config.js文件</h3><p>在根目录下创建 <code>webpack.config.js</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/webpack.dev.js'</span>);</div></pre></td></tr></table></figure>\n<p>现在在控制台中执行 <code>npm install</code> 命令，安装项目的依赖。</p>\n<h2 id=\"二、Polyfills\"><a href=\"#二、Polyfills\" class=\"headerlink\" title=\"二、Polyfills\"></a>二、Polyfills</h2><p>配置好上述的几个文件之后呢，我们在项目中的根目录下创建一个 <code>src</code> 文件夹。</p>\n<p>在 <code>src</code> 文件夹的下面新建一个 <code>polyfills.ts</code> 文件。</p>\n<p><code>polyfills.ts</code> 文件里引入了运行Angular应用时所需的一些标准js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/symbol'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/object'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/function'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/parse-int'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/parse-float'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/number'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/math'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/string'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/date'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/array'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/regexp'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/set'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/weak-map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/weak-set'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/typed'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Evergreen browsers require these. **/</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/reflect'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es7/reflect'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***************************************************************************************************</span></div><div class=\"line\"> * Zone JS is required by Angular itself.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'zone.js/dist/zone'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'ts-helpers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (process.env.ENV === <span class=\"string\">'production'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Production</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Development and test</span></div><div class=\"line\">  <span class=\"built_in\">Error</span>[<span class=\"string\">'stackTraceLimit'</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'zone.js/dist/long-stack-trace-zone'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、Vendor\"><a href=\"#三、Vendor\" class=\"headerlink\" title=\"三、Vendor\"></a>三、Vendor</h2><p>在 <code>src</code> 文件夹的下面新建一个 <code>vendor.ts</code> 文件。</p>\n<p><code>vendor.ts</code> 文件里面引入了一些第三方的依赖。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Angular</span></div><div class=\"line\"><span class=\"comment\">//包含所有提供商依赖</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/compiler'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/core'</span>;  <span class=\"comment\">// 存放核心代码，如变化监测机制，依赖注入机制，渲染，装饰器等。</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RxJS</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Subscription'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Subject'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/BehaviorSubject'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Bootsctrap</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'bootstrap/dist/css/bootstrap.css'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'font-awesome/css/font-awesome.css'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、Main\"><a href=\"#四、Main\" class=\"headerlink\" title=\"四、Main\"></a>四、Main</h2><p>在 <code>src</code> 文件夹的下面新建一个 <code>main.ts</code> 文件。</p>\n<p>在 <code>main.ts</code> 文件中，我们指定了项目的根模块为 <code>AppModule</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AppModule&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/app.module'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser-dynamic\"</span>;</div><div class=\"line\"></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// platformBrowserDynamic().bootstrapModule()方法来编译启用AppModule模块</span></div><div class=\"line\"><span class=\"comment\">// 根据当前的运行环境，如操作系统、浏览器，来初始化一个运行环境，然后从这个环境里面运行AppModule。</span></div></pre></td></tr></table></figure>\n<h2 id=\"五、config\"><a href=\"#五、config\" class=\"headerlink\" title=\"五、config\"></a>五、config</h2><p>在根目录下创建一个 <code>config</code> 文件夹</p>\n<h3 id=\"helpers-js\"><a href=\"#helpers-js\" class=\"headerlink\" title=\"helpers.js\"></a>helpers.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>helpers.js</code> 文件。</p>\n<p>在这里请注意入口 <code>polyfills</code>,<code>vendor</code> 和 <code>app</code> 的先后顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _root = path.resolve(__dirname, <span class=\"string\">'..'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">root</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">  args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> path.join.apply(path, [_root].concat(args));</div><div class=\"line\">&#125;</div><div class=\"line\">exports.root = root;</div></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-common-js\"><a href=\"#webpack-common-js\" class=\"headerlink\" title=\"webpack.common.js\"></a>webpack.common.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>webpack.common.js</code> 文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'polyfills'</span>: <span class=\"string\">'./src/polyfills.ts'</span>, <span class=\"comment\">// 运行Angular时所需的一些标准js</span></div><div class=\"line\">    <span class=\"string\">'vendor'</span>: <span class=\"string\">'./src/vendor.ts'</span>, <span class=\"comment\">// Angular、Lodash、bootstrap.css......</span></div><div class=\"line\">    <span class=\"string\">'app'</span>: <span class=\"string\">'./src/main.ts'</span> <span class=\"comment\">// 应用代码</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolve</span>: &#123; <span class=\"comment\">// 解析模块路径时的配置</span></div><div class=\"line\">    extensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.js'</span>] <span class=\"comment\">// 制定模块的后缀，在引入模块时就会自动补全</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">rules</span>: [ <span class=\"comment\">// 告诉webpack每一类文件需要使用什么加载器来处理</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>   : <span class=\"regexp\">/\\.ts$/</span>,</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'awesome-typescript-loader'</span>, <span class=\"string\">'angular2-template-loader'</span>]</div><div class=\"line\">        <span class=\"comment\">//awesome-typescript-loader - 一个用于把TypeScript代码转译成ES5的加载器，它会由tsconfig.json文件提供指导</span></div><div class=\"line\">        <span class=\"comment\">//angular2-template-loader - 用于加载Angular组件的模板和样式</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">'json-loader'</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader!stylus-loader'</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>   : <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'to-string-loader'</span>, <span class=\"string\">'css-loader'</span>]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.html$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span>: <span class=\"string\">'raw-loader'</span>,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: [helpers.root(<span class=\"string\">'src/index.html'</span>)]</div><div class=\"line\">        <span class=\"comment\">//html - 为组件模板准备的加载器</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(jpg|png|gif)$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span>:<span class=\"string\">\"file-loader\"</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">\"url-loader?limit=10000&amp;minetype=application/font-woff\"</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">\"file-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"comment\">//热替换</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: [<span class=\"string\">'vendor'</span>, <span class=\"string\">'polyfills'</span>]</div><div class=\"line\">      <span class=\"comment\">//多个html共用一个js文件，提取公共代码</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span></div><div class=\"line\">      <span class=\"comment\">// 自动向目标.html文件注入script和link标签</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-dev-js\"><a href=\"#webpack-dev-js\" class=\"headerlink\" title=\"webpack.dev.js\"></a>webpack.dev.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>webpack.dev.js</code> 文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> commonConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = webpackMerge(commonConfig, &#123;</div><div class=\"line\">  <span class=\"attr\">output</span>   : &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : helpers.root(<span class=\"string\">'dist'</span>),</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'/'</span>,</div><div class=\"line\">    <span class=\"attr\">filename</span>  : <span class=\"string\">'[name].js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">port</span>              : <span class=\"number\">8080</span>,</div><div class=\"line\">    <span class=\"attr\">historyApiFallback</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>至此，现在的目录结构就如下图所示：</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/01070446b15d18534a3d\" alt=\"\"><br>因为我们还没有创建 <code>AppModule</code> ，所以 <code>main.ts</code> 文件会被标红。</p>\n<h2 id=\"六、根模块-AppModule\"><a href=\"#六、根模块-AppModule\" class=\"headerlink\" title=\"六、根模块 AppModule\"></a>六、根模块 AppModule</h2><p>基本的配置已经完成啦，现在我们来创建根模块～</p>\n<p>在 <code>src</code> 文件下面新建一个 <code>app</code> 文件夹，</p>\n<h3 id=\"创建-app-component-ts\"><a href=\"#创建-app-component-ts\" class=\"headerlink\" title=\"创建 app.component.ts\"></a>创建 app.component.ts</h3><p>在<code>app</code> 文件夹下面新建 <code>app.component.ts</code> 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  <span class=\"attr\">selector</span>   : <span class=\"string\">'root-app'</span>,</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'./app.component.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建-app-component-html\"><a href=\"#创建-app-component-html\" class=\"headerlink\" title=\"创建 app.component.html\"></a>创建 app.component.html</h3><p>在 <code>app</code> 文件夹下面新建 <code>app.component.html</code> 文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>Hello Angular2<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-app-routes-ts\"><a href=\"#创建-app-routes-ts\" class=\"headerlink\" title=\"创建 app.routes.ts\"></a>创建 app.routes.ts</h3><p>这里我们用一下路由来完成页面之间的跳转<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: Routes = [ <span class=\"comment\">// Routes类型的数组</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span> : AppComponent</div><div class=\"line\">  &#125;,&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span> : <span class=\"string\">'full'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-app-module-ts\"><a href=\"#创建-app-module-ts\" class=\"headerlink\" title=\"创建 app.module.ts\"></a>创建 app.module.ts</h3><p>在 <code>app</code> 文件夹下面新建 <code>app.module.ts</code> 文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/forms\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"><span class=\"comment\">//@NgModule装饰器用来为模块定义元数据</span></div><div class=\"line\">@NgModule(&#123; <span class=\"comment\">// @NgModule 用来定义模块用的装饰器</span></div><div class=\"line\">  declarations: [AppComponent], <span class=\"comment\">// 导入模块所依赖的组件、指令等,用于指定这个模块的视图类</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule, <span class=\"comment\">//包含了commonModule和applicationModule模块,封装在浏览器平台运行时的一些工具库</span></div><div class=\"line\">    FormsModule,  <span class=\"comment\">// 表单相关的组件指令等，包含了[(ngModel)]</span></div><div class=\"line\">    RouterModule.forRoot(routes,&#123;<span class=\"attr\">useHash</span>: <span class=\"literal\">false</span>&#125;), <span class=\"comment\">// RouterModule.forRoot()方法来创建根路由模块</span></div><div class=\"line\">  ], <span class=\"comment\">// 导入当前模块所需要的其他模块</span></div><div class=\"line\">  bootstrap: [AppComponent], <span class=\"comment\">// 标记出引导组件</span></div><div class=\"line\">  <span class=\"comment\">//把这个AppComponent标记为引导 (bootstrap) 组件。当Angular引导应用时，它会在DOM中渲</span></div><div class=\"line\">  <span class=\"comment\">//染AppComponent，并把结果放进index.html的元素内部。</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、宿主页面\"><a href=\"#六、宿主页面\" class=\"headerlink\" title=\"六、宿主页面\"></a>六、宿主页面</h2><p>在 <code>src</code> 文件夹下面新建 <code>index.html</code> 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Angular2 Hello Word<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root-app</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">root-app</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>好啦，此时的项目目录结构就是下图所示：<br><img src=\"https://dn-mhke0kuv.qbox.me/3ec563d462c569bfe32c\" alt=\"\"></p>\n<p>接下来运行 <code>npm start</code> 开始你的 <code>Angular</code> 之旅吧～</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://angular.io\" target=\"_blank\" rel=\"external\">Angular官方网站</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上个月<code>Angular</code>发布了<code>4.0.0</code>版本，少年们，赶快学起来吧，这篇文章带领大家搭建一个简单的<code>Angular</code>应用，会尽量详细的把每个点都解释到。</p>\n<p>首先我选择了用<code>webpack2</code>来作为打包工具，选择<code>wenpack2</code>的理由不言而喻。这里假设你已经了解<code>webpack2</code>的一些原理，下面开始来学习吧～</p>\n<p>详细代码可以看我的<a href=\"https://github.com/yanyixin/angular2-todolist\" target=\"_blank\" rel=\"external\">git项目</a></p>","more":"<h2 id=\"一、配置-webpack\"><a href=\"#一、配置-webpack\" class=\"headerlink\" title=\"一、配置 webpack\"></a>一、配置 webpack</h2><p>首先新建一个项目文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir angular-dream</div><div class=\"line\">cd angular-dream</div></pre></td></tr></table></figure>\n<p>在控制台中输入命令 <code>npm init</code> ，创建 <code>package.json</code> 文件。如图：</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/9b59abb62c90ea6f70e0.png\" alt=\"创建package.json文件\"><br>在控制台中可以一路回车。当然，这里我命名了项目的名称为 <code>angular-dream</code> ，还有一些其他的信息。</p>\n<p>创建好之后用编辑器（我使用的是webstorm）打开这个项目。</p>\n<h3 id=\"package-json-文件的配置\"><a href=\"#package-json-文件的配置\" class=\"headerlink\" title=\"package.json 文件的配置\"></a>package.json 文件的配置</h3><p>关于 <code>package.json</code> 文件里面的一些参数的含义，可以参考<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc1\" target=\"_blank\" rel=\"external\">阮一峰老师写的这篇文章</a> 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"angular2-dream\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Hello Angular2\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --config config/webpack.dev.js --progress\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config config/webpack.dev.js --progress --profile --bail\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span>,</div><div class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"rimraf\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"angular2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"yanmeng@hujiang.com\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"@angular/animations\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/common\"</span>: <span class=\"string\">\"~4.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/compiler\"</span>: <span class=\"string\">\"~4.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/core\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/forms\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/http\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"core-js\"</span>: <span class=\"string\">\"^2.4.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"rxjs\"</span>: <span class=\"string\">\"5.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"zone.js\"</span>: <span class=\"string\">\"^0.8.5\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"reflect-metadata\"</span>: <span class=\"string\">\"^0.1.10\"</span>,</div><div class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.28.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/compiler-cli\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-browser\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-browser-dynamic\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/platform-server\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angular/router\"</span>: <span class=\"string\">\"~4.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angularclass/hmr\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@angularclass/hmr-loader\"</span>: <span class=\"string\">\"^3.0.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@types/jasmine\"</span>: <span class=\"string\">\"^2.5.43\"</span>,</div><div class=\"line\">    <span class=\"string\">\"@types/node\"</span>: <span class=\"string\">\"^6.0.45\"</span>,</div><div class=\"line\">    <span class=\"string\">\"angular2-template-loader\"</span>: <span class=\"string\">\"^0.6.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"awesome-typescript-loader\"</span>: <span class=\"string\">\"^3.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"bootstrap\"</span>: <span class=\"string\">\"^4.0.0-alpha.6\"</span>,</div><div class=\"line\">    <span class=\"string\">\"bootstrap-sass\"</span>: <span class=\"string\">\"^3.3.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.26.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"2.0.0-beta.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^0.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"font-awesome\"</span>: <span class=\"string\">\"^4.7.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"html-loader\"</span>: <span class=\"string\">\"^0.4.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"postcss-loader\"</span>: <span class=\"string\">\"^1.3.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"raw-loader\"</span>: <span class=\"string\">\"^0.5.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"to-string-loader\"</span>: <span class=\"string\">\"^1.1.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"ts-helpers\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.7\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"2.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"2.2.0-rc.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"typescript\"</span>: <span class=\"string\">\"^2.2.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>@angular/compiler</code> - Angular的模板编译器。 它会理解模板，并且把模板转化成代码，以供应用程序运行和渲染。 开发人员通常不会直接跟这个编译器打交道，而是通过platform-browser-dynamic或离线模板编译器间接使用它。</li>\n<li><code>@angular/platform-browser</code> - 与DOM和浏览器相关的每样东西，特别是帮助往DOM中渲染的那部分。 这个包还包含bootstrapStatic方法，用来引导那些在产品构建时需要离线预编译模板的应用程序</li>\n<li><code>@angular/platform-browser-dynamic</code> - 为应用程序提供一些提供商和bootstrap方法，以便在客户端编译模板。不要用于离线编译。 我们使用这个包在开发期间引导应用，以及引导plunker中的范例。</li>\n<li><code>core-js</code> - 为全局上下文(window)打的补丁，提供了ES2015(ES6)的很多基础特性。 我们也可以把它换成提供了相同内核API的其它填充库。 一旦所有的“主流浏览器”都实现了这些API，这个依赖就可以去掉了。</li>\n<li><code>reflect-metadata</code> - 一个由Angular和TypeScript编译器共享的依赖包。</li>\n</ul>\n<h3 id=\"tsconfig-json-文件的配置\"><a href=\"#tsconfig-json-文件的配置\" class=\"headerlink\" title=\"tsconfig.json 文件的配置\"></a>tsconfig.json 文件的配置</h3><p>在项目的根目录下创建 <code>tsconfig.json</code> 文件。</p>\n<p>浏览器不能直接执行 <code>TypeScript</code> ，需要用编译器转译成JavaScript，而且编译器需要进行一些配置。 <code>tsconfig.json</code> 的配置就是指导编译器如何生成JavaScript文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>, <span class=\"comment\">// 组织代码的方式</span></div><div class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>, <span class=\"comment\">// 编译目标平台</span></div><div class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 把ts文件变异成js文件时，是否生成对应的SourceMap文件</span></div><div class=\"line\">    <span class=\"string\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 让TypeScript支持为带有装饰器的声明生成元数据</span></div><div class=\"line\">    <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否启用实验性装饰器特性</span></div><div class=\"line\">    <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"dom\"</span>, <span class=\"string\">\"es6\"</span>],</div><div class=\"line\">    <span class=\"string\">\"suppressImplicitAnyIndexErrors\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"exclude\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</div><div class=\"line\">    <span class=\"string\">\"dist\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"awesomeTypescriptLoaderOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"forkChecker\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"useWebpackText\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"compileOnSave\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"string\">\"buildOnSave\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当 <code>noImplicitAny</code> 标志是 <code>true</code> 并且TypeScript编译器无法推断出类型时，它仍然会生成JavaScript文件。 但是它也会报告一个错误。 很多饱经沧桑的程序员更喜欢这种严格的设置，因为类型检查能在编译期间捕获更多意外错误。</p>\n<h3 id=\"创建-webpack-config-js文件\"><a href=\"#创建-webpack-config-js文件\" class=\"headerlink\" title=\"创建 webpack.config.js文件\"></a>创建 webpack.config.js文件</h3><p>在根目录下创建 <code>webpack.config.js</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/webpack.dev.js'</span>);</div></pre></td></tr></table></figure>\n<p>现在在控制台中执行 <code>npm install</code> 命令，安装项目的依赖。</p>\n<h2 id=\"二、Polyfills\"><a href=\"#二、Polyfills\" class=\"headerlink\" title=\"二、Polyfills\"></a>二、Polyfills</h2><p>配置好上述的几个文件之后呢，我们在项目中的根目录下创建一个 <code>src</code> 文件夹。</p>\n<p>在 <code>src</code> 文件夹的下面新建一个 <code>polyfills.ts</code> 文件。</p>\n<p><code>polyfills.ts</code> 文件里引入了运行Angular应用时所需的一些标准js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/symbol'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/object'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/function'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/parse-int'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/parse-float'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/number'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/math'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/string'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/date'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/array'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/regexp'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/set'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/weak-map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/weak-set'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/typed'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Evergreen browsers require these. **/</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es6/reflect'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'core-js/es7/reflect'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***************************************************************************************************</span></div><div class=\"line\"> * Zone JS is required by Angular itself.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'zone.js/dist/zone'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'ts-helpers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (process.env.ENV === <span class=\"string\">'production'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Production</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Development and test</span></div><div class=\"line\">  <span class=\"built_in\">Error</span>[<span class=\"string\">'stackTraceLimit'</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'zone.js/dist/long-stack-trace-zone'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、Vendor\"><a href=\"#三、Vendor\" class=\"headerlink\" title=\"三、Vendor\"></a>三、Vendor</h2><p>在 <code>src</code> 文件夹的下面新建一个 <code>vendor.ts</code> 文件。</p>\n<p><code>vendor.ts</code> 文件里面引入了一些第三方的依赖。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Angular</span></div><div class=\"line\"><span class=\"comment\">//包含所有提供商依赖</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/compiler'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/core'</span>;  <span class=\"comment\">// 存放核心代码，如变化监测机制，依赖注入机制，渲染，装饰器等。</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RxJS</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Subscription'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/Subject'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/BehaviorSubject'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Bootsctrap</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'bootstrap/dist/css/bootstrap.css'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'font-awesome/css/font-awesome.css'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、Main\"><a href=\"#四、Main\" class=\"headerlink\" title=\"四、Main\"></a>四、Main</h2><p>在 <code>src</code> 文件夹的下面新建一个 <code>main.ts</code> 文件。</p>\n<p>在 <code>main.ts</code> 文件中，我们指定了项目的根模块为 <code>AppModule</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;AppModule&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/app.module'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser-dynamic\"</span>;</div><div class=\"line\"></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// platformBrowserDynamic().bootstrapModule()方法来编译启用AppModule模块</span></div><div class=\"line\"><span class=\"comment\">// 根据当前的运行环境，如操作系统、浏览器，来初始化一个运行环境，然后从这个环境里面运行AppModule。</span></div></pre></td></tr></table></figure>\n<h2 id=\"五、config\"><a href=\"#五、config\" class=\"headerlink\" title=\"五、config\"></a>五、config</h2><p>在根目录下创建一个 <code>config</code> 文件夹</p>\n<h3 id=\"helpers-js\"><a href=\"#helpers-js\" class=\"headerlink\" title=\"helpers.js\"></a>helpers.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>helpers.js</code> 文件。</p>\n<p>在这里请注意入口 <code>polyfills</code>,<code>vendor</code> 和 <code>app</code> 的先后顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _root = path.resolve(__dirname, <span class=\"string\">'..'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">root</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">  args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> path.join.apply(path, [_root].concat(args));</div><div class=\"line\">&#125;</div><div class=\"line\">exports.root = root;</div></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-common-js\"><a href=\"#webpack-common-js\" class=\"headerlink\" title=\"webpack.common.js\"></a>webpack.common.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>webpack.common.js</code> 文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'polyfills'</span>: <span class=\"string\">'./src/polyfills.ts'</span>, <span class=\"comment\">// 运行Angular时所需的一些标准js</span></div><div class=\"line\">    <span class=\"string\">'vendor'</span>: <span class=\"string\">'./src/vendor.ts'</span>, <span class=\"comment\">// Angular、Lodash、bootstrap.css......</span></div><div class=\"line\">    <span class=\"string\">'app'</span>: <span class=\"string\">'./src/main.ts'</span> <span class=\"comment\">// 应用代码</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolve</span>: &#123; <span class=\"comment\">// 解析模块路径时的配置</span></div><div class=\"line\">    extensions: [<span class=\"string\">'.ts'</span>, <span class=\"string\">'.js'</span>] <span class=\"comment\">// 制定模块的后缀，在引入模块时就会自动补全</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">rules</span>: [ <span class=\"comment\">// 告诉webpack每一类文件需要使用什么加载器来处理</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>   : <span class=\"regexp\">/\\.ts$/</span>,</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'awesome-typescript-loader'</span>, <span class=\"string\">'angular2-template-loader'</span>]</div><div class=\"line\">        <span class=\"comment\">//awesome-typescript-loader - 一个用于把TypeScript代码转译成ES5的加载器，它会由tsconfig.json文件提供指导</span></div><div class=\"line\">        <span class=\"comment\">//angular2-template-loader - 用于加载Angular组件的模板和样式</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">'json-loader'</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'css-loader!stylus-loader'</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>   : <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'to-string-loader'</span>, <span class=\"string\">'css-loader'</span>]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.html$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span>: <span class=\"string\">'raw-loader'</span>,</div><div class=\"line\">        <span class=\"attr\">exclude</span>: [helpers.root(<span class=\"string\">'src/index.html'</span>)]</div><div class=\"line\">        <span class=\"comment\">//html - 为组件模板准备的加载器</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(jpg|png|gif)$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span>:<span class=\"string\">\"file-loader\"</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">\"url-loader?limit=10000&amp;minetype=application/font-woff\"</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</div><div class=\"line\">        <span class=\"attr\">use</span> : <span class=\"string\">\"file-loader\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"comment\">//热替换</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: [<span class=\"string\">'vendor'</span>, <span class=\"string\">'polyfills'</span>]</div><div class=\"line\">      <span class=\"comment\">//多个html共用一个js文件，提取公共代码</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'./src/index.html'</span></div><div class=\"line\">      <span class=\"comment\">// 自动向目标.html文件注入script和link标签</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"webpack-dev-js\"><a href=\"#webpack-dev-js\" class=\"headerlink\" title=\"webpack.dev.js\"></a>webpack.dev.js</h3><p>在 <code>config</code> 文件夹下面创建一个 <code>webpack.dev.js</code> 文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> commonConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> helpers = <span class=\"built_in\">require</span>(<span class=\"string\">'./helpers'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = webpackMerge(commonConfig, &#123;</div><div class=\"line\">  <span class=\"attr\">output</span>   : &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : helpers.root(<span class=\"string\">'dist'</span>),</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">'/'</span>,</div><div class=\"line\">    <span class=\"attr\">filename</span>  : <span class=\"string\">'[name].js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">port</span>              : <span class=\"number\">8080</span>,</div><div class=\"line\">    <span class=\"attr\">historyApiFallback</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>至此，现在的目录结构就如下图所示：</p>\n<p><img src=\"https://dn-mhke0kuv.qbox.me/01070446b15d18534a3d\" alt=\"\"><br>因为我们还没有创建 <code>AppModule</code> ，所以 <code>main.ts</code> 文件会被标红。</p>\n<h2 id=\"六、根模块-AppModule\"><a href=\"#六、根模块-AppModule\" class=\"headerlink\" title=\"六、根模块 AppModule\"></a>六、根模块 AppModule</h2><p>基本的配置已经完成啦，现在我们来创建根模块～</p>\n<p>在 <code>src</code> 文件下面新建一个 <code>app</code> 文件夹，</p>\n<h3 id=\"创建-app-component-ts\"><a href=\"#创建-app-component-ts\" class=\"headerlink\" title=\"创建 app.component.ts\"></a>创建 app.component.ts</h3><p>在<code>app</code> 文件夹下面新建 <code>app.component.ts</code> 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  <span class=\"attr\">selector</span>   : <span class=\"string\">'root-app'</span>,</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'./app.component.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建-app-component-html\"><a href=\"#创建-app-component-html\" class=\"headerlink\" title=\"创建 app.component.html\"></a>创建 app.component.html</h3><p>在 <code>app</code> 文件夹下面新建 <code>app.component.html</code> 文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>Hello Angular2<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-app-routes-ts\"><a href=\"#创建-app-routes-ts\" class=\"headerlink\" title=\"创建 app.routes.ts\"></a>创建 app.routes.ts</h3><p>这里我们用一下路由来完成页面之间的跳转<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: Routes = [ <span class=\"comment\">// Routes类型的数组</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span> : AppComponent</div><div class=\"line\">  &#125;,&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>      : <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span> : <span class=\"string\">'full'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-app-module-ts\"><a href=\"#创建-app-module-ts\" class=\"headerlink\" title=\"创建 app.module.ts\"></a>创建 app.module.ts</h3><p>在 <code>app</code> 文件夹下面新建 <code>app.module.ts</code> 文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/forms\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"><span class=\"comment\">//@NgModule装饰器用来为模块定义元数据</span></div><div class=\"line\">@NgModule(&#123; <span class=\"comment\">// @NgModule 用来定义模块用的装饰器</span></div><div class=\"line\">  declarations: [AppComponent], <span class=\"comment\">// 导入模块所依赖的组件、指令等,用于指定这个模块的视图类</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule, <span class=\"comment\">//包含了commonModule和applicationModule模块,封装在浏览器平台运行时的一些工具库</span></div><div class=\"line\">    FormsModule,  <span class=\"comment\">// 表单相关的组件指令等，包含了[(ngModel)]</span></div><div class=\"line\">    RouterModule.forRoot(routes,&#123;<span class=\"attr\">useHash</span>: <span class=\"literal\">false</span>&#125;), <span class=\"comment\">// RouterModule.forRoot()方法来创建根路由模块</span></div><div class=\"line\">  ], <span class=\"comment\">// 导入当前模块所需要的其他模块</span></div><div class=\"line\">  bootstrap: [AppComponent], <span class=\"comment\">// 标记出引导组件</span></div><div class=\"line\">  <span class=\"comment\">//把这个AppComponent标记为引导 (bootstrap) 组件。当Angular引导应用时，它会在DOM中渲</span></div><div class=\"line\">  <span class=\"comment\">//染AppComponent，并把结果放进index.html的元素内部。</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、宿主页面\"><a href=\"#六、宿主页面\" class=\"headerlink\" title=\"六、宿主页面\"></a>六、宿主页面</h2><p>在 <code>src</code> 文件夹下面新建 <code>index.html</code> 文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Angular2 Hello Word<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root-app</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">root-app</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>好啦，此时的项目目录结构就是下图所示：<br><img src=\"https://dn-mhke0kuv.qbox.me/3ec563d462c569bfe32c\" alt=\"\"></p>\n<p>接下来运行 <code>npm start</code> 开始你的 <code>Angular</code> 之旅吧～</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://angular.io\" target=\"_blank\" rel=\"external\">Angular官方网站</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}